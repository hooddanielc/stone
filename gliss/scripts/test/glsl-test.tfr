/token STRUCT VOID WHILE IDENTIFIER TYPE_NAME FLOATCONSTANT DOUBLECONSTANT INTCONSTANT UINTCONSTANT BOOLCONSTANT FIELD_SELECTION LEFT_OP RIGHT_OP INC_OP DEC_OP LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP XOR_OP MUL_ASSIGN DIV_ASSIGN ADD_ASSIGN MOD_ASSIGN LEFT_ASSIGN RIGHT_ASSIGN AND_ASSIGN XOR_ASSIGN OR_ASSIGN SUB_ASSIGN LEFT_PAREN RIGHT_PAREN LEFT_BRACKET RIGHT_BRACKET LEFT_BRACE RIGHT_BRACE DOT COMMA COLON EQUAL SEMICOLON BANG DASH TILDE PLUS STAR SLASH PERCENT LEFT_ANGLE RIGHT_ANGLE VERTICAL_BAR CARET AMPERSAND QUESTION INVARIANT PRECISE HIGH_PRECISION MEDIUM_PRECISION LOW_PRECISION PRECISION CONST BREAK CONTINUE DO ELSE FOR IF DISCARD RETURN SWITCH CASE DEFAULT SUBROUTINE CENTROID IN OUT INOUT UNIFORM PATCH SAMPLE BUFFER SHARED COHERENT VOLATILE RESTRICT READONLY WRITEONLY NOPERSPECTIVE FLAT SMOOTH LAYOUT
/top -> translation_unit
/epsilon -> nothing

variable_identifier -> IDENTIFIER

primary_expression -> variable_identifier
primary_expression -> INTCONSTANT
primary_expression -> UINTCONSTANT
primary_expression -> FLOATCONSTANT
primary_expression -> BOOLCONSTANT
primary_expression -> DOUBLECONSTANT
primary_expression -> LEFT_PAREN expression RIGHT_PAREN

postfix_expression -> primary_expression
postfix_expression -> postfix_expression LEFT_BRACKET integer_expression RIGHT_BRACKET
postfix_expression -> function_call
postfix_expression -> postfix_expression DOT FIELD_SELECTION
postfix_expression -> postfix_expression INC_OP
postfix_expression -> postfix_expression DEC_OP

integer_expression -> expression

function_call -> function_call_or_method
function_call_or_method -> function_call_generic

function_call_generic -> function_call_header_with_parameters RIGHT_PAREN
function_call_generic -> function_call_header_no_parameters RIGHT_PAREN

function_call_header_no_parameters -> function_call_header VOID
function_call_header_no_parameters -> function_call_header
function_call_header_with_parameters -> function_call_header assignment_expression
function_call_header_with_parameters -> function_call_header_with_parameters COMMA assignment_expression

function_call_header -> function_identifier LEFT_PAREN

function_identifier -> type_specifier
function_identifier -> postfix_expression

unary_expression -> postfix_expression
unary_expression -> INC_OP unary_expression
unary_expression -> DEC_OP unary_expression
unary_expression -> unary_operator unary_expression
unary_operator -> PLUS
unary_operator -> DASH
unary_operator -> BANG
unary_operator -> TILDE

multiplicative_expression -> unary_expression
multiplicative_expression -> multiplicative_expression STAR unary_expression
multiplicative_expression -> multiplicative_expression SLASH unary_expression
multiplicative_expression -> multiplicative_expression PERCENT unary_expression

additive_expression -> multiplicative_expression
additive_expression -> additive_expression PLUS multiplicative_expression
additive_expression -> additive_expression DASH multiplicative_expression

shift_expression -> additive_expression
shift_expression -> shift_expression LEFT_OP additive_expression
shift_expression -> shift_expression RIGHT_OP additive_expression

relational_expression -> shift_expression
relational_expression -> relational_expression LEFT_ANGLE shift_expression
relational_expression -> relational_expression RIGHT_ANGLE shift_expression
relational_expression -> relational_expression LE_OP shift_expression
relational_expression -> relational_expression GE_OP shift_expression

equality_expression -> relational_expression
equality_expression -> equality_expression EQ_OP relational_expression
equality_expression -> equality_expression NE_OP relational_expression

and_expression -> equality_expression
and_expression -> and_expression AMPERSAND equality_expression

exclusive_or_expression -> and_expression
exclusive_or_expression -> exclusive_or_expression CARET and_expression

inclusive_or_expression -> exclusive_or_expression
inclusive_or_expression -> inclusive_or_expression VERTICAL_BAR exclusive_or_expression

logical_and_expression -> inclusive_or_expression
logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression
logical_xor_expression -> logical_and_expression
logical_xor_expression -> logical_xor_expression XOR_OP logical_and_expression
logical_or_expression -> logical_xor_expression
logical_or_expression -> logical_or_expression OR_OP logical_xor_expression

conditional_expression -> logical_or_expression
conditional_expression -> logical_or_expression QUESTION expression COLON assignment_expression

assignment_expression -> conditional_expression
assignment_expression -> unary_expression assignment_operator assignment_expression

assignment_operator -> EQUAL
assignment_operator -> MUL_ASSIGN
assignment_operator -> DIV_ASSIGN
assignment_operator -> MOD_ASSIGN
assignment_operator -> ADD_ASSIGN
assignment_operator -> SUB_ASSIGN
assignment_operator -> LEFT_ASSIGN
assignment_operator -> RIGHT_ASSIGN
assignment_operator -> AND_ASSIGN
assignment_operator -> XOR_ASSIGN
assignment_operator -> OR_ASSIGN

expression -> assignment_expression
expression -> expression COMMA assignment_expression

constant_expression -> conditional_expression

declaration -> function_prototype SEMICOLON
declaration -> init_declarator_list SEMICOLON
declaration -> PRECISION precision_qualifier type_specifier SEMICOLON
declaration -> type_qualifier IDENTIFIER LEFT_BRACE struct_declaration_list RIGHT_BRACE SEMICOLON
declaration -> type_qualifier IDENTIFIER LEFT_BRACE struct_declaration_list RIGHT_BRACE IDENTIFIER SEMICOLON
declaration -> type_qualifier IDENTIFIER LEFT_BRACE struct_declaration_list RIGHT_BRACE IDENTIFIER array_specifier SEMICOLON
declaration -> type_qualifier SEMICOLON
declaration -> type_qualifier IDENTIFIER SEMICOLON
declaration -> type_qualifier IDENTIFIER identifier_list SEMICOLON

identifier_list -> COMMA IDENTIFIER
identifier_list -> identifier_list COMMA IDENTIFIER

function_prototype -> function_declarator RIGHT_PAREN

function_declarator -> function_header
function_declarator -> function_header_with_parameters

function_header_with_parameters -> function_header parameter_declaration
function_header_with_parameters -> function_header_with_parameters COMMA parameter_declaration

function_header -> fully_specified_type IDENTIFIER LEFT_PAREN

parameter_declarator -> type_specifier IDENTIFIER
parameter_declarator -> type_specifier IDENTIFIER array_specifier
parameter_declaration -> type_qualifier parameter_declarator
parameter_declaration -> parameter_declarator
parameter_declaration -> type_qualifier parameter_type_specifier
parameter_declaration -> parameter_type_specifier
parameter_type_specifier -> type_specifier

init_declarator_list -> single_declaration
init_declarator_list -> init_declarator_list COMMA IDENTIFIER
init_declarator_list -> init_declarator_list COMMA IDENTIFIER array_specifier
init_declarator_list -> init_declarator_list COMMA IDENTIFIER array_specifier EQUAL initializer
init_declarator_list -> init_declarator_list COMMA IDENTIFIER EQUAL initializer

single_declaration -> fully_specified_type
single_declaration -> fully_specified_type IDENTIFIER
single_declaration -> fully_specified_type IDENTIFIER array_specifier
single_declaration -> fully_specified_type IDENTIFIER array_specifier EQUAL initializer
single_declaration -> fully_specified_type IDENTIFIER EQUAL initializer

fully_specified_type -> type_specifier
fully_specified_type -> type_qualifier type_specifier

invariant_qualifier -> INVARIANT
interpolation_qualifier -> SMOOTH
interpolation_qualifier -> FLAT
interpolation_qualifier -> NOPERSPECTIVE

layout_qualifier -> LAYOUT LEFT_PAREN layout_qualifier_id_list RIGHT_PAREN
layout_qualifier_id_list -> layout_qualifier_id
layout_qualifier_id_list -> layout_qualifier_id_list COMMA layout_qualifier_id
layout_qualifier_id -> IDENTIFIER
layout_qualifier_id -> IDENTIFIER EQUAL constant_expression
layout_qualifier_id -> SHARED

precise_qualifier -> PRECISE

type_qualifier -> single_type_qualifier
type_qualifier -> type_qualifier single_type_qualifier

single_type_qualifier -> storage_qualifier
single_type_qualifier -> layout_qualifier
single_type_qualifier -> precision_qualifier
single_type_qualifier -> interpolation_qualifier
single_type_qualifier -> invariant_qualifier
single_type_qualifier -> precise_qualifier

storage_qualifier -> CONST
storage_qualifier -> INOUT
storage_qualifier -> IN
storage_qualifier -> OUT
storage_qualifier -> CENTROID
storage_qualifier -> PATCH
storage_qualifier -> SAMPLE
storage_qualifier -> UNIFORM
storage_qualifier -> BUFFER
storage_qualifier -> SHARED
storage_qualifier -> COHERENT
storage_qualifier -> VOLATILE
storage_qualifier -> RESTRICT
storage_qualifier -> READONLY
storage_qualifier -> WRITEONLY
storage_qualifier -> SUBROUTINE
storage_qualifier -> SUBROUTINE LEFT_PAREN type_name_list RIGHT_PAREN

type_name_list -> TYPE_NAME
type_name_list -> type_name_list COMMA TYPE_NAME

type_specifier -> type_specifier_nonarray
type_specifier -> type_specifier_nonarray array_specifier

array_specifier -> LEFT_BRACKET RIGHT_BRACKET
array_specifier -> LEFT_BRACKET conditional_expression RIGHT_BRACKET
array_specifier -> array_specifier LEFT_BRACKET RIGHT_BRACKET
array_specifier -> array_specifier LEFT_BRACKET conditional_expression RIGHT_BRACKET

type_specifier_nonarray -> TYPE_NAME

precision_qualifier -> HIGH_PRECISION
precision_qualifier -> MEDIUM_PRECISION
precision_qualifier -> LOW_PRECISION

struct_specifier -> STRUCT IDENTIFIER LEFT_BRACE struct_declaration_list RIGHT_BRACE
struct_specifier -> STRUCT LEFT_BRACE struct_declaration_list RIGHT_BRACE
struct_declaration_list -> struct_declaration
struct_declaration_list -> struct_declaration_list struct_declaration
struct_declaration -> type_specifier struct_declarator_list SEMICOLON
struct_declaration -> type_qualifier type_specifier struct_declarator_list SEMICOLON
struct_declarator_list -> struct_declarator
struct_declarator_list -> struct_declarator_list COMMA struct_declarator
struct_declarator -> IDENTIFIER
struct_declarator -> IDENTIFIER array_specifier

initializer -> assignment_expression
initializer -> LEFT_BRACE initializer_list RIGHT_BRACE
initializer -> LEFT_BRACE initializer_list COMMA RIGHT_BRACE
initializer_list -> initializer
initializer_list -> initializer_list COMMA initializer

declaration_statement -> declaration

statement -> compound_statement
statement -> simple_statement

simple_statement -> declaration_statement
simple_statement -> expression_statement
simple_statement -> selection_statement
simple_statement -> switch_statement
simple_statement -> case_label
simple_statement -> iteration_statement
simple_statement -> jump_statement

compound_statement -> LEFT_BRACE RIGHT_BRACE
compound_statement -> LEFT_BRACE statement_list RIGHT_BRACE

statement_no_new_scope -> compound_statement_no_new_scope
statement_no_new_scope -> simple_statement

compound_statement_no_new_scope -> LEFT_BRACE RIGHT_BRACE
compound_statement_no_new_scope -> LEFT_BRACE statement_list RIGHT_BRACE

statement_list -> statement
statement_list -> statement_list statement

expression_statement -> SEMICOLON
expression_statement -> expression SEMICOLON

selection_statement -> IF LEFT_PAREN expression RIGHT_PAREN selection_rest_statement
selection_rest_statement -> statement ELSE statement
selection_rest_statement -> statement

condition -> expression
condition -> fully_specified_type IDENTIFIER EQUAL initializer

switch_statement -> SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_BRACE switch_statement_list RIGHT_BRACE
switch_statement_list -> nothing
switch_statement_list -> statement_list

case_label -> CASE expression COLON
case_label -> DEFAULT COLON

iteration_statement -> WHILE LEFT_PAREN condition RIGHT_PAREN statement_no_new_scope
iteration_statement -> DO statement WHILE LEFT_PAREN expression RIGHT_PAREN SEMICOLON
iteration_statement -> FOR LEFT_PAREN for_init_statement for_rest_statement RIGHT_PAREN statement_no_new_scope

for_init_statement -> expression_statement
for_init_statement -> declaration_statement

conditionopt -> condition
conditionopt -> nothing

for_rest_statement -> conditionopt SEMICOLON
for_rest_statement -> conditionopt SEMICOLON expression

jump_statement -> CONTINUE SEMICOLON
jump_statement -> BREAK SEMICOLON
jump_statement -> RETURN SEMICOLON
jump_statement -> RETURN expression SEMICOLON
jump_statement -> DISCARD SEMICOLON

translation_unit -> external_declaration
translation_unit -> translation_unit external_declaration

external_declaration -> function_definition
external_declaration -> declaration
external_declaration -> SEMICOLON

function_definition -> function_prototype compound_statement_no_new_scope
