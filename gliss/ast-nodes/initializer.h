#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "assignment-expression.h"
#include "initializer-list.h"

/**
 * Patterns for initializer
 *
 * 1. assignment_expression
 * 2. LEFT_BRACE initializer_list RIGHT_BRACE
 * 3. LEFT_BRACE initializer_list COMMA RIGHT_BRACE
 */

namespace gliss {

namespace ast {

class assignment_expression_t;
class initializer_list_t;

class initializer_t: public ast_t {

public:

  static constexpr int rules = 3;

  static constexpr int id = 272;

  virtual ~initializer_t() = default;

};  // initializer_t

class initializer_assignment_expression_t: public initializer_t {

public:

  std::shared_ptr<assignment_expression_t> assignment_expression_0;

  initializer_assignment_expression_t(
    std::shared_ptr<assignment_expression_t> assignment_expression_0_
  ): assignment_expression_0(assignment_expression_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 272;
  }

  static std::shared_ptr<initializer_assignment_expression_t> make(
    std::shared_ptr<assignment_expression_t> assignment_expression_0_
  ) {
    return std::make_shared<initializer_assignment_expression_t>(
      assignment_expression_0_
    );
  }

};  // initializer_assignment_expression_t

class initializer_left_brace_initializer_list_right_brace_t: public initializer_t {

public:

  std::shared_ptr<ast_token_t> left_brace_0;

  std::shared_ptr<initializer_list_t> initializer_list_1;

  std::shared_ptr<ast_token_t> right_brace_2;

  initializer_left_brace_initializer_list_right_brace_t(
    std::shared_ptr<ast_token_t> left_brace_0_,
    std::shared_ptr<initializer_list_t> initializer_list_1_,
    std::shared_ptr<ast_token_t> right_brace_2_
  ): left_brace_0(left_brace_0_),
     initializer_list_1(initializer_list_1_),
     right_brace_2(right_brace_2_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 272;
  }

  static std::shared_ptr<initializer_left_brace_initializer_list_right_brace_t> make(
    std::shared_ptr<ast_token_t> LEFT_BRACE_0_,
    std::shared_ptr<initializer_list_t> initializer_list_1_,
    std::shared_ptr<ast_token_t> RIGHT_BRACE_2_
  ) {
    return std::make_shared<initializer_left_brace_initializer_list_right_brace_t>(
      LEFT_BRACE_0_,
      initializer_list_1_,
      RIGHT_BRACE_2_
    );
  }

};  // initializer_left_brace_initializer_list_right_brace_t

class initializer_left_brace_initializer_list_comma_right_brace_t: public initializer_t {

public:

  std::shared_ptr<ast_token_t> left_brace_0;

  std::shared_ptr<initializer_list_t> initializer_list_1;

  std::shared_ptr<ast_token_t> comma_2;

  std::shared_ptr<ast_token_t> right_brace_3;

  initializer_left_brace_initializer_list_comma_right_brace_t(
    std::shared_ptr<ast_token_t> left_brace_0_,
    std::shared_ptr<initializer_list_t> initializer_list_1_,
    std::shared_ptr<ast_token_t> comma_2_,
    std::shared_ptr<ast_token_t> right_brace_3_
  ): left_brace_0(left_brace_0_),
     initializer_list_1(initializer_list_1_),
     comma_2(comma_2_),
     right_brace_3(right_brace_3_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 272;
  }

  static std::shared_ptr<initializer_left_brace_initializer_list_comma_right_brace_t> make(
    std::shared_ptr<ast_token_t> LEFT_BRACE_0_,
    std::shared_ptr<initializer_list_t> initializer_list_1_,
    std::shared_ptr<ast_token_t> COMMA_2_,
    std::shared_ptr<ast_token_t> RIGHT_BRACE_3_
  ) {
    return std::make_shared<initializer_left_brace_initializer_list_comma_right_brace_t>(
      LEFT_BRACE_0_,
      initializer_list_1_,
      COMMA_2_,
      RIGHT_BRACE_3_
    );
  }

};  // initializer_left_brace_initializer_list_comma_right_brace_t

}   // ast

}   // gliss
