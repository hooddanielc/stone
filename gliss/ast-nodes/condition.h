#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "expression.h"
#include "fully-specified-type.h"
#include "initializer.h"

namespace gliss {

namespace ast {

class expression_t;
class fully_specified_type_t;
class initializer_t;

class condition_t: public ast_t {

public:

  static constexpr int num_types = 2;

  template <int n, typename = void>
  struct pattern;

  template<int n>
  struct pattern<n, typename std::enable_if<n == 0>::type> {
    using type = condition_expression_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  template<int n>
  struct pattern<n, typename std::enable_if<n == 1>::type> {
    using type = condition_fully_specified_type_identifier_equal_initializer_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  virtual ~condition_t() = default;

};  // condition_t

class condition_expression_t: public condition_t {

public:

  std::unique_ptr<expression_t> expression_0;

  condition_expression_t(
    std::unique_ptr<expression_t> &&expression_0_
  ): expression_0(std::move(expression_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // condition_expression_t

class condition_fully_specified_type_identifier_equal_initializer_t: public condition_t {

public:

  std::unique_ptr<fully_specified_type_t> fully_specified_type_0;

  std::unique_ptr<token_t> identifier_1;

  std::unique_ptr<token_t> equal_2;

  std::unique_ptr<initializer_t> initializer_3;

  condition_fully_specified_type_identifier_equal_initializer_t(
    std::unique_ptr<fully_specified_type_t> &&fully_specified_type_0_,
    std::unique_ptr<token_t> &&identifier_1_,
    std::unique_ptr<token_t> &&equal_2_,
    std::unique_ptr<initializer_t> &&initializer_3_
  ): fully_specified_type_0(std::move(fully_specified_type_0_)),
     identifier_1(std::move(identifier_1_)),
     equal_2(std::move(equal_2_)),
     initializer_3(std::move(initializer_3_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // condition_fully_specified_type_identifier_equal_initializer_t

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> condition_t::pattern<0>::list = {
  pattern_item_t<expression_t>::get()
};

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> condition_t::pattern<1>::list = {
  pattern_item_t<fully_specified_type_t>::get(),
  pattern_item_t<token_t>::get(token_t::uppercase_to_kind("IDENTIFIER")),
  pattern_item_t<token_t>::get(token_t::uppercase_to_kind("EQUAL")),
  pattern_item_t<initializer_t>::get()
};

}   // ast

}   // gliss
