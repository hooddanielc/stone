#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "expression.h"
#include "fully-specified-type.h"
#include "initializer.h"

/**
 * Patterns for condition
 *
 * 1. expression
 * 2. fully_specified_type IDENTIFIER EQUAL initializer
 */

namespace gliss {

namespace ast {

class expression_t;
class fully_specified_type_t;
class initializer_t;

class condition_t: public ast_t {

public:

  static constexpr int num_types = 2;

  virtual ~condition_t() = default;

};  // condition_t

class condition_expression_t: public condition_t {

public:

  std::unique_ptr<expression_t> expression_0;

  condition_expression_t(
    std::unique_ptr<expression_t> &&expression_0_
  ): expression_0(std::move(expression_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<condition_expression_t> make(
    std::unique_ptr<expression_t> &&expression_0_
  ) {
    return std::make_unique<condition_expression_t>(
      std::move(expression_0_)
    );
  }

};  // condition_expression_t

class condition_fully_specified_type_identifier_equal_initializer_t: public condition_t {

public:

  std::unique_ptr<fully_specified_type_t> fully_specified_type_0;

  std::unique_ptr<token_t> identifier_1;

  std::unique_ptr<token_t> equal_2;

  std::unique_ptr<initializer_t> initializer_3;

  condition_fully_specified_type_identifier_equal_initializer_t(
    std::unique_ptr<fully_specified_type_t> &&fully_specified_type_0_,
    std::unique_ptr<token_t> &&identifier_1_,
    std::unique_ptr<token_t> &&equal_2_,
    std::unique_ptr<initializer_t> &&initializer_3_
  ): fully_specified_type_0(std::move(fully_specified_type_0_)),
     identifier_1(std::move(identifier_1_)),
     equal_2(std::move(equal_2_)),
     initializer_3(std::move(initializer_3_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<condition_fully_specified_type_identifier_equal_initializer_t> make(
    std::unique_ptr<fully_specified_type_t> &&fully_specified_type_0_,
    const token_t *IDENTIFIER_1_,
    const token_t *EQUAL_2_,
    std::unique_ptr<initializer_t> &&initializer_3_
  ) {
    return std::make_unique<condition_fully_specified_type_identifier_equal_initializer_t>(
      std::move(fully_specified_type_0_),
      std::make_unique<token_t>(*IDENTIFIER_1_),
      std::make_unique<token_t>(*EQUAL_2_),
      std::move(initializer_3_)
    );
  }

};  // condition_fully_specified_type_identifier_equal_initializer_t

}   // ast

}   // gliss
