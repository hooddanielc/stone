#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "expression.h"

/**
 * Patterns for expression_statement
 *
 * 1. SEMICOLON
 * 2. expression SEMICOLON
 */

namespace gliss {

namespace ast {

class expression_t;

class expression_statement_t: public ast_t {

public:

  static constexpr int rules = 2;

  static constexpr int id = 281;

  virtual ~expression_statement_t() = default;

};  // expression_statement_t

class expression_statement_semicolon_t: public expression_statement_t {

public:

  std::shared_ptr<ast_token_t> semicolon_0;

  expression_statement_semicolon_t(
    std::shared_ptr<ast_token_t> semicolon_0_
  ): semicolon_0(semicolon_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 281;
  }

  static std::shared_ptr<expression_statement_semicolon_t> make(
    std::shared_ptr<ast_token_t> SEMICOLON_0_
  ) {
    return std::make_shared<expression_statement_semicolon_t>(
      SEMICOLON_0_
    );
  }

};  // expression_statement_semicolon_t

class expression_statement_expression_semicolon_t: public expression_statement_t {

public:

  std::shared_ptr<expression_t> expression_0;

  std::shared_ptr<ast_token_t> semicolon_1;

  expression_statement_expression_semicolon_t(
    std::shared_ptr<expression_t> expression_0_,
    std::shared_ptr<ast_token_t> semicolon_1_
  ): expression_0(expression_0_),
     semicolon_1(semicolon_1_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 281;
  }

  static std::shared_ptr<expression_statement_expression_semicolon_t> make(
    std::shared_ptr<expression_t> expression_0_,
    std::shared_ptr<ast_token_t> SEMICOLON_1_
  ) {
    return std::make_shared<expression_statement_expression_semicolon_t>(
      expression_0_,
      SEMICOLON_1_
    );
  }

};  // expression_statement_expression_semicolon_t

}   // ast

}   // gliss
