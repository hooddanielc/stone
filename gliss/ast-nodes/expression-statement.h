#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "expression.h"

namespace gliss {

namespace ast {

class expression_t;

class expression_statement_t: public ast_t {

public:

  static constexpr int num_types = 2;

  template <int n, typename = void>
  struct pattern;

  template<int n>
  struct pattern<n, typename std::enable_if<n == 0>::type> {
    using type = expression_statement_semicolon_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  template<int n>
  struct pattern<n, typename std::enable_if<n == 1>::type> {
    using type = expression_statement_expression_semicolon_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  virtual ~expression_statement_t() = default;

};  // expression_statement_t

class expression_statement_semicolon_t: public expression_statement_t {

public:

  std::unique_ptr<token_t> semicolon_0;

  expression_statement_semicolon_t(
    std::unique_ptr<token_t> &&semicolon_0_
  ): semicolon_0(std::move(semicolon_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // expression_statement_semicolon_t

class expression_statement_expression_semicolon_t: public expression_statement_t {

public:

  std::unique_ptr<expression_t> expression_0;

  std::unique_ptr<token_t> semicolon_1;

  expression_statement_expression_semicolon_t(
    std::unique_ptr<expression_t> &&expression_0_,
    std::unique_ptr<token_t> &&semicolon_1_
  ): expression_0(std::move(expression_0_)),
     semicolon_1(std::move(semicolon_1_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // expression_statement_expression_semicolon_t

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> expression_statement_t::pattern<0>::list = {
  pattern_item_t<token_t>::get(token_t::uppercase_to_kind("SEMICOLON"))
};

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> expression_statement_t::pattern<1>::list = {
  pattern_item_t<expression_t>::get(),
  pattern_item_t<token_t>::get(token_t::uppercase_to_kind("SEMICOLON"))
};

}   // ast

}   // gliss
