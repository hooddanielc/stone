#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "exclusive-or-expression.h"

/**
 * Patterns for inclusive_or_expression
 *
 * 1. exclusive_or_expression
 * 2. inclusive_or_expression VERTICAL_BAR exclusive_or_expression
 */

namespace gliss {

namespace ast {

class exclusive_or_expression_t;

class inclusive_or_expression_t: public ast_t {

public:

  static constexpr int num_types = 2;

  virtual ~inclusive_or_expression_t() = default;

};  // inclusive_or_expression_t

class inclusive_or_expression_exclusive_or_expression_t: public inclusive_or_expression_t {

public:

  std::unique_ptr<exclusive_or_expression_t> exclusive_or_expression_0;

  inclusive_or_expression_exclusive_or_expression_t(
    std::unique_ptr<exclusive_or_expression_t> &&exclusive_or_expression_0_
  ): exclusive_or_expression_0(std::move(exclusive_or_expression_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<inclusive_or_expression_exclusive_or_expression_t> make(
    std::unique_ptr<exclusive_or_expression_t> &&exclusive_or_expression_0_
  ) {
    return std::make_unique<inclusive_or_expression_exclusive_or_expression_t>(
      std::move(exclusive_or_expression_0_)
    );
  }

};  // inclusive_or_expression_exclusive_or_expression_t

class inclusive_or_expression_inclusive_or_expression_vertical_bar_exclusive_or_expression_t: public inclusive_or_expression_t {

public:

  std::unique_ptr<inclusive_or_expression_t> inclusive_or_expression_0;

  std::unique_ptr<token_t> vertical_bar_1;

  std::unique_ptr<exclusive_or_expression_t> exclusive_or_expression_2;

  inclusive_or_expression_inclusive_or_expression_vertical_bar_exclusive_or_expression_t(
    std::unique_ptr<inclusive_or_expression_t> &&inclusive_or_expression_0_,
    std::unique_ptr<token_t> &&vertical_bar_1_,
    std::unique_ptr<exclusive_or_expression_t> &&exclusive_or_expression_2_
  ): inclusive_or_expression_0(std::move(inclusive_or_expression_0_)),
     vertical_bar_1(std::move(vertical_bar_1_)),
     exclusive_or_expression_2(std::move(exclusive_or_expression_2_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<inclusive_or_expression_inclusive_or_expression_vertical_bar_exclusive_or_expression_t> make(
    std::unique_ptr<inclusive_or_expression_t> &&inclusive_or_expression_0_,
    const token_t *VERTICAL_BAR_1_,
    std::unique_ptr<exclusive_or_expression_t> &&exclusive_or_expression_2_
  ) {
    return std::make_unique<inclusive_or_expression_inclusive_or_expression_vertical_bar_exclusive_or_expression_t>(
      std::move(inclusive_or_expression_0_),
      std::make_unique<token_t>(*VERTICAL_BAR_1_),
      std::move(exclusive_or_expression_2_)
    );
  }

};  // inclusive_or_expression_inclusive_or_expression_vertical_bar_exclusive_or_expression_t

}   // ast

}   // gliss
