#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "multiplicative-expression.h"

/**
 * Patterns for additive_expression
 *
 * 1. multiplicative_expression
 * 2. additive_expression PLUS multiplicative_expression
 * 3. additive_expression DASH multiplicative_expression
 */

namespace gliss {

namespace ast {

class multiplicative_expression_t;

class additive_expression_t: public ast_t {

public:

  static constexpr int rules = 3;

  static constexpr int id = 226;

  virtual ~additive_expression_t() = default;

};  // additive_expression_t

class additive_expression_multiplicative_expression_t: public additive_expression_t {

public:

  std::shared_ptr<multiplicative_expression_t> multiplicative_expression_0;

  additive_expression_multiplicative_expression_t(
    std::shared_ptr<multiplicative_expression_t> multiplicative_expression_0_
  ): multiplicative_expression_0(multiplicative_expression_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 226;
  }

  static std::shared_ptr<additive_expression_multiplicative_expression_t> make(
    std::shared_ptr<multiplicative_expression_t> multiplicative_expression_0_
  ) {
    return std::make_shared<additive_expression_multiplicative_expression_t>(
      multiplicative_expression_0_
    );
  }

};  // additive_expression_multiplicative_expression_t

class additive_expression_additive_expression_plus_multiplicative_expression_t: public additive_expression_t {

public:

  std::shared_ptr<additive_expression_t> additive_expression_0;

  std::shared_ptr<ast_token_t> plus_1;

  std::shared_ptr<multiplicative_expression_t> multiplicative_expression_2;

  additive_expression_additive_expression_plus_multiplicative_expression_t(
    std::shared_ptr<additive_expression_t> additive_expression_0_,
    std::shared_ptr<ast_token_t> plus_1_,
    std::shared_ptr<multiplicative_expression_t> multiplicative_expression_2_
  ): additive_expression_0(additive_expression_0_),
     plus_1(plus_1_),
     multiplicative_expression_2(multiplicative_expression_2_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 226;
  }

  static std::shared_ptr<additive_expression_additive_expression_plus_multiplicative_expression_t> make(
    std::shared_ptr<additive_expression_t> additive_expression_0_,
    std::shared_ptr<ast_token_t> PLUS_1_,
    std::shared_ptr<multiplicative_expression_t> multiplicative_expression_2_
  ) {
    return std::make_shared<additive_expression_additive_expression_plus_multiplicative_expression_t>(
      additive_expression_0_,
      PLUS_1_,
      multiplicative_expression_2_
    );
  }

};  // additive_expression_additive_expression_plus_multiplicative_expression_t

class additive_expression_additive_expression_dash_multiplicative_expression_t: public additive_expression_t {

public:

  std::shared_ptr<additive_expression_t> additive_expression_0;

  std::shared_ptr<ast_token_t> dash_1;

  std::shared_ptr<multiplicative_expression_t> multiplicative_expression_2;

  additive_expression_additive_expression_dash_multiplicative_expression_t(
    std::shared_ptr<additive_expression_t> additive_expression_0_,
    std::shared_ptr<ast_token_t> dash_1_,
    std::shared_ptr<multiplicative_expression_t> multiplicative_expression_2_
  ): additive_expression_0(additive_expression_0_),
     dash_1(dash_1_),
     multiplicative_expression_2(multiplicative_expression_2_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 226;
  }

  static std::shared_ptr<additive_expression_additive_expression_dash_multiplicative_expression_t> make(
    std::shared_ptr<additive_expression_t> additive_expression_0_,
    std::shared_ptr<ast_token_t> DASH_1_,
    std::shared_ptr<multiplicative_expression_t> multiplicative_expression_2_
  ) {
    return std::make_shared<additive_expression_additive_expression_dash_multiplicative_expression_t>(
      additive_expression_0_,
      DASH_1_,
      multiplicative_expression_2_
    );
  }

};  // additive_expression_additive_expression_dash_multiplicative_expression_t

}   // ast

}   // gliss
