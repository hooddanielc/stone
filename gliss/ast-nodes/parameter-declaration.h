#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "type-qualifier.h"
#include "parameter-declarator.h"
#include "parameter-type-specifier.h"

/**
 * Patterns for parameter_declaration
 *
 * 1. type_qualifier parameter_declarator
 * 2. parameter_declarator
 * 3. type_qualifier parameter_type_specifier
 * 4. parameter_type_specifier
 */

namespace gliss {

namespace ast {

class type_qualifier_t;
class parameter_declarator_t;
class parameter_type_specifier_t;

class parameter_declaration_t: public ast_t {

public:

  static constexpr int rules = 4;

  static constexpr int id = 247;

  virtual ~parameter_declaration_t() = default;

};  // parameter_declaration_t

class parameter_declaration_type_qualifier_parameter_declarator_t: public parameter_declaration_t {

public:

  std::unique_ptr<type_qualifier_t> type_qualifier_0;

  std::unique_ptr<parameter_declarator_t> parameter_declarator_1;

  parameter_declaration_type_qualifier_parameter_declarator_t(
    std::unique_ptr<type_qualifier_t> &&type_qualifier_0_,
    std::unique_ptr<parameter_declarator_t> &&parameter_declarator_1_
  ): type_qualifier_0(std::move(type_qualifier_0_)),
     parameter_declarator_1(std::move(parameter_declarator_1_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<parameter_declaration_type_qualifier_parameter_declarator_t> make(
    std::unique_ptr<type_qualifier_t> &&type_qualifier_0_,
    std::unique_ptr<parameter_declarator_t> &&parameter_declarator_1_
  ) {
    return std::make_unique<parameter_declaration_type_qualifier_parameter_declarator_t>(
      std::move(type_qualifier_0_),
      std::move(parameter_declarator_1_)
    );
  }

};  // parameter_declaration_type_qualifier_parameter_declarator_t

class parameter_declaration_parameter_declarator_t: public parameter_declaration_t {

public:

  std::unique_ptr<parameter_declarator_t> parameter_declarator_0;

  parameter_declaration_parameter_declarator_t(
    std::unique_ptr<parameter_declarator_t> &&parameter_declarator_0_
  ): parameter_declarator_0(std::move(parameter_declarator_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<parameter_declaration_parameter_declarator_t> make(
    std::unique_ptr<parameter_declarator_t> &&parameter_declarator_0_
  ) {
    return std::make_unique<parameter_declaration_parameter_declarator_t>(
      std::move(parameter_declarator_0_)
    );
  }

};  // parameter_declaration_parameter_declarator_t

class parameter_declaration_type_qualifier_parameter_type_specifier_t: public parameter_declaration_t {

public:

  std::unique_ptr<type_qualifier_t> type_qualifier_0;

  std::unique_ptr<parameter_type_specifier_t> parameter_type_specifier_1;

  parameter_declaration_type_qualifier_parameter_type_specifier_t(
    std::unique_ptr<type_qualifier_t> &&type_qualifier_0_,
    std::unique_ptr<parameter_type_specifier_t> &&parameter_type_specifier_1_
  ): type_qualifier_0(std::move(type_qualifier_0_)),
     parameter_type_specifier_1(std::move(parameter_type_specifier_1_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<parameter_declaration_type_qualifier_parameter_type_specifier_t> make(
    std::unique_ptr<type_qualifier_t> &&type_qualifier_0_,
    std::unique_ptr<parameter_type_specifier_t> &&parameter_type_specifier_1_
  ) {
    return std::make_unique<parameter_declaration_type_qualifier_parameter_type_specifier_t>(
      std::move(type_qualifier_0_),
      std::move(parameter_type_specifier_1_)
    );
  }

};  // parameter_declaration_type_qualifier_parameter_type_specifier_t

class parameter_declaration_parameter_type_specifier_t: public parameter_declaration_t {

public:

  std::unique_ptr<parameter_type_specifier_t> parameter_type_specifier_0;

  parameter_declaration_parameter_type_specifier_t(
    std::unique_ptr<parameter_type_specifier_t> &&parameter_type_specifier_0_
  ): parameter_type_specifier_0(std::move(parameter_type_specifier_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<parameter_declaration_parameter_type_specifier_t> make(
    std::unique_ptr<parameter_type_specifier_t> &&parameter_type_specifier_0_
  ) {
    return std::make_unique<parameter_declaration_parameter_type_specifier_t>(
      std::move(parameter_type_specifier_0_)
    );
  }

};  // parameter_declaration_parameter_type_specifier_t

}   // ast

}   // gliss
