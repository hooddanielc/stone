#pragma once


/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */
  

#include <vector>
#include "../ast.h"
#include "type-qualifier.h"
#include "parameter-declarator.h"
#include "parameter-type-specifier.h"

namespace gliss {

namespace ast {

class type_qualifier_t;
class parameter_declarator_t;
class parameter_type_specifier_t;

class parameter_declaration_t: public ast_t {

public:

  static constexpr int num_types = 4;

  template <int n, typename = void>
  struct pattern;

  template<int n>
  struct pattern<n, typename std::enable_if<n == 0>::type> {
    using type = parameter_declaration_type_qualifier_parameter_declarator_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  template<int n>
  struct pattern<n, typename std::enable_if<n == 1>::type> {
    using type = parameter_declaration_parameter_declarator_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  template<int n>
  struct pattern<n, typename std::enable_if<n == 2>::type> {
    using type = parameter_declaration_type_qualifier_parameter_type_specifier_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  template<int n>
  struct pattern<n, typename std::enable_if<n == 3>::type> {
    using type = parameter_declaration_parameter_type_specifier_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  virtual ~parameter_declaration_t() = default;

};  // parameter_declaration_t


class parameter_declaration_type_qualifier_parameter_declarator_t: public parameter_declaration_t {

public:

  std::unique_ptr<type_qualifier_t> type_qualifier_0;

  std::unique_ptr<parameter_declarator_t> parameter_declarator_1;

  parameter_declaration_type_qualifier_parameter_declarator_t(
    std::unique_ptr<type_qualifier_t> &&type_qualifier_0_,
    std::unique_ptr<parameter_declarator_t> &&parameter_declarator_1_
  ): type_qualifier_0(std::move(type_qualifier_0_)),
     parameter_declarator_1(std::move(parameter_declarator_1_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // parameter_declaration_type_qualifier_parameter_declarator_t
  

class parameter_declaration_parameter_declarator_t: public parameter_declaration_t {

public:

  std::unique_ptr<parameter_declarator_t> parameter_declarator_0;

  parameter_declaration_parameter_declarator_t(
    std::unique_ptr<parameter_declarator_t> &&parameter_declarator_0_
  ): parameter_declarator_0(std::move(parameter_declarator_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // parameter_declaration_parameter_declarator_t
  

class parameter_declaration_type_qualifier_parameter_type_specifier_t: public parameter_declaration_t {

public:

  std::unique_ptr<type_qualifier_t> type_qualifier_0;

  std::unique_ptr<parameter_type_specifier_t> parameter_type_specifier_1;

  parameter_declaration_type_qualifier_parameter_type_specifier_t(
    std::unique_ptr<type_qualifier_t> &&type_qualifier_0_,
    std::unique_ptr<parameter_type_specifier_t> &&parameter_type_specifier_1_
  ): type_qualifier_0(std::move(type_qualifier_0_)),
     parameter_type_specifier_1(std::move(parameter_type_specifier_1_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // parameter_declaration_type_qualifier_parameter_type_specifier_t
  

class parameter_declaration_parameter_type_specifier_t: public parameter_declaration_t {

public:

  std::unique_ptr<parameter_type_specifier_t> parameter_type_specifier_0;

  parameter_declaration_parameter_type_specifier_t(
    std::unique_ptr<parameter_type_specifier_t> &&parameter_type_specifier_0_
  ): parameter_type_specifier_0(std::move(parameter_type_specifier_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // parameter_declaration_parameter_type_specifier_t
  

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> parameter_declaration_t::pattern<0>::list = {
  pattern_item_t<type_qualifier_t>::get(),
  pattern_item_t<parameter_declarator_t>::get()
};

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> parameter_declaration_t::pattern<1>::list = {
  pattern_item_t<parameter_declarator_t>::get()
};

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> parameter_declaration_t::pattern<2>::list = {
  pattern_item_t<type_qualifier_t>::get(),
  pattern_item_t<parameter_type_specifier_t>::get()
};

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> parameter_declaration_t::pattern<3>::list = {
  pattern_item_t<parameter_type_specifier_t>::get()
};

}   // ast

}   // gliss
