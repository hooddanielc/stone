#pragma once


/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */
  

#include <vector>
#include "../ast.h"
#include "fully-specified-type.h"
#include "fully-specified-type-identifier.h"
#include "fully-specified-type-identifier-array.h"
#include "fully-specified-type-identifier-array-initializer.h"
#include "fully-specified-type-initializer.h"

namespace gliss {

namespace ast {

class single_declaration_t: public ast_t {

public:

  static const std::vector<std::vector<any_pattern_item_t>> patterns;

  single_declaration_t(
    const fully_specified_type_t &
  );

  single_declaration_t(
    const fully_specified_type_identifier_t &
  );

  single_declaration_t(
    const fully_specified_type_identifier_array_t &
  );

  single_declaration_t(
    const fully_specified_type_identifier_array_initializer_t &
  );

  single_declaration_t(
    const fully_specified_type_initializer_t &
  );

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // single_declaration_t

const std::vector<std::vector<any_pattern_item_t>> single_declaration_t::patterns = {
  {
    pattern_item_t<fully_specified_type_t>::get()
  }, {
    pattern_item_t<fully_specified_type_identifier_t>::get()
  }, {
    pattern_item_t<fully_specified_type_identifier_array_t>::get()
  }, {
    pattern_item_t<fully_specified_type_identifier_array_initializer_t>::get()
  }, {
    pattern_item_t<fully_specified_type_initializer_t>::get()
  }
};

}   // ast

}   // gliss
