#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "nothing.h"
#include "statement-list.h"

/**
 * Patterns for switch_statement_list
 *
 * 1. nothing
 * 2. statement_list
 */

namespace gliss {

namespace ast {

class nothing_t;
class statement_list_t;

class switch_statement_list_t: public ast_t {

public:

  static constexpr int num_types = 2;

  virtual ~switch_statement_list_t() = default;

};  // switch_statement_list_t

class switch_statement_list_nothing_t: public switch_statement_list_t {

public:

  std::unique_ptr<nothing_t> nothing_0;

  switch_statement_list_nothing_t(
    std::unique_ptr<nothing_t> &&nothing_0_
  ): nothing_0(std::move(nothing_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<switch_statement_list_nothing_t> make(
    std::unique_ptr<nothing_t> &&nothing_0_
  ) {
    return std::make_unique<switch_statement_list_nothing_t>(
      std::move(nothing_0_)
    );
  }

};  // switch_statement_list_nothing_t

class switch_statement_list_statement_list_t: public switch_statement_list_t {

public:

  std::unique_ptr<statement_list_t> statement_list_0;

  switch_statement_list_statement_list_t(
    std::unique_ptr<statement_list_t> &&statement_list_0_
  ): statement_list_0(std::move(statement_list_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<switch_statement_list_statement_list_t> make(
    std::unique_ptr<statement_list_t> &&statement_list_0_
  ) {
    return std::make_unique<switch_statement_list_statement_list_t>(
      std::move(statement_list_0_)
    );
  }

};  // switch_statement_list_statement_list_t

}   // ast

}   // gliss
