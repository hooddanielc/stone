#pragma once


/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */
  

#include <vector>
#include "../ast.h"
#include "nothing.h"
#include "statement-list.h"

namespace gliss {

namespace ast {

class nothing_t;
class statement_list_t;

class switch_statement_list_t: public ast_t {

public:

  static constexpr int num_types = 2;

  template <int n, typename = void>
  struct pattern;

  template<int n>
  struct pattern<n, typename std::enable_if<n == 0>::type> {
    using type = switch_statement_list_nothing_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  template<int n>
  struct pattern<n, typename std::enable_if<n == 1>::type> {
    using type = switch_statement_list_statement_list_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  virtual ~switch_statement_list_t() = default;

};  // switch_statement_list_t


class switch_statement_list_nothing_t: public switch_statement_list_t {

public:

  std::unique_ptr<nothing_t> nothing_0;

  switch_statement_list_nothing_t(
    std::unique_ptr<nothing_t> &&nothing_0_
  ): nothing_0(std::move(nothing_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // switch_statement_list_nothing_t
  

class switch_statement_list_statement_list_t: public switch_statement_list_t {

public:

  std::unique_ptr<statement_list_t> statement_list_0;

  switch_statement_list_statement_list_t(
    std::unique_ptr<statement_list_t> &&statement_list_0_
  ): statement_list_0(std::move(statement_list_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // switch_statement_list_statement_list_t
  

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> switch_statement_list_t::pattern<0>::list = {
  pattern_item_t<nothing_t>::get()
};

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> switch_statement_list_t::pattern<1>::list = {
  pattern_item_t<statement_list_t>::get()
};

}   // ast

}   // gliss
