#pragma once


/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */
  

#include <vector>
#include "../ast.h"
#include "statement.h"

namespace gliss {

namespace ast {

class selection_rest_statement_else_t: public ast_t {

public:

  static const std::vector<std::vector<any_pattern_item_t>> patterns;

  selection_rest_statement_else_t(
    const statement_t &,
    const token_t &,
    const statement_t &
  );

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // selection_rest_statement_else_t

const std::vector<std::vector<any_pattern_item_t>> selection_rest_statement_else_t::patterns = {
  {
    pattern_item_t<statement_t>::get(),
    pattern_item_t<token_t>::get(token_t::uppercase_to_kind("ELSE")),
    pattern_item_t<statement_t>::get()
  }
};

}   // ast

}   // gliss
