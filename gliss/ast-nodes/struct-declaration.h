#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "type-specifier.h"
#include "struct-declarator-list.h"
#include "type-qualifier.h"

/**
 * Patterns for struct_declaration
 *
 * 1. type_specifier struct_declarator_list SEMICOLON
 * 2. type_qualifier type_specifier struct_declarator_list SEMICOLON
 */

namespace gliss {

namespace ast {

class type_specifier_t;
class struct_declarator_list_t;
class type_qualifier_t;

class struct_declaration_t: public ast_t {

public:

  static constexpr int rules = 2;

  static constexpr int id = 269;

  virtual ~struct_declaration_t() = default;

};  // struct_declaration_t

class struct_declaration_type_specifier_struct_declarator_list_semicolon_t: public struct_declaration_t {

public:

  std::shared_ptr<type_specifier_t> type_specifier_0;

  std::shared_ptr<struct_declarator_list_t> struct_declarator_list_1;

  std::shared_ptr<ast_token_t> semicolon_2;

  struct_declaration_type_specifier_struct_declarator_list_semicolon_t(
    std::shared_ptr<type_specifier_t> type_specifier_0_,
    std::shared_ptr<struct_declarator_list_t> struct_declarator_list_1_,
    std::shared_ptr<ast_token_t> semicolon_2_
  ): type_specifier_0(type_specifier_0_),
     struct_declarator_list_1(struct_declarator_list_1_),
     semicolon_2(semicolon_2_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 269;
  }

  static std::shared_ptr<struct_declaration_type_specifier_struct_declarator_list_semicolon_t> make(
    std::shared_ptr<type_specifier_t> type_specifier_0_,
    std::shared_ptr<struct_declarator_list_t> struct_declarator_list_1_,
    std::shared_ptr<ast_token_t> SEMICOLON_2_
  ) {
    return std::make_shared<struct_declaration_type_specifier_struct_declarator_list_semicolon_t>(
      type_specifier_0_,
      struct_declarator_list_1_,
      SEMICOLON_2_
    );
  }

};  // struct_declaration_type_specifier_struct_declarator_list_semicolon_t

class struct_declaration_type_qualifier_type_specifier_struct_declarator_list_semicolon_t: public struct_declaration_t {

public:

  std::shared_ptr<type_qualifier_t> type_qualifier_0;

  std::shared_ptr<type_specifier_t> type_specifier_1;

  std::shared_ptr<struct_declarator_list_t> struct_declarator_list_2;

  std::shared_ptr<ast_token_t> semicolon_3;

  struct_declaration_type_qualifier_type_specifier_struct_declarator_list_semicolon_t(
    std::shared_ptr<type_qualifier_t> type_qualifier_0_,
    std::shared_ptr<type_specifier_t> type_specifier_1_,
    std::shared_ptr<struct_declarator_list_t> struct_declarator_list_2_,
    std::shared_ptr<ast_token_t> semicolon_3_
  ): type_qualifier_0(type_qualifier_0_),
     type_specifier_1(type_specifier_1_),
     struct_declarator_list_2(struct_declarator_list_2_),
     semicolon_3(semicolon_3_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 269;
  }

  static std::shared_ptr<struct_declaration_type_qualifier_type_specifier_struct_declarator_list_semicolon_t> make(
    std::shared_ptr<type_qualifier_t> type_qualifier_0_,
    std::shared_ptr<type_specifier_t> type_specifier_1_,
    std::shared_ptr<struct_declarator_list_t> struct_declarator_list_2_,
    std::shared_ptr<ast_token_t> SEMICOLON_3_
  ) {
    return std::make_shared<struct_declaration_type_qualifier_type_specifier_struct_declarator_list_semicolon_t>(
      type_qualifier_0_,
      type_specifier_1_,
      struct_declarator_list_2_,
      SEMICOLON_3_
    );
  }

};  // struct_declaration_type_qualifier_type_specifier_struct_declarator_list_semicolon_t

}   // ast

}   // gliss
