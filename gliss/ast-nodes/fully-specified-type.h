#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "type-specifier.h"
#include "type-qualifier.h"

/**
 * Patterns for fully_specified_type
 *
 * 1. type_specifier
 * 2. type_qualifier type_specifier
 */

namespace gliss {

namespace ast {

class type_specifier_t;
class type_qualifier_t;

class fully_specified_type_t: public ast_t {

public:

  static constexpr int num_types = 2;

  virtual ~fully_specified_type_t() = default;

};  // fully_specified_type_t

class fully_specified_type_type_specifier_t: public fully_specified_type_t {

public:

  std::unique_ptr<type_specifier_t> type_specifier_0;

  fully_specified_type_type_specifier_t(
    std::unique_ptr<type_specifier_t> &&type_specifier_0_
  ): type_specifier_0(std::move(type_specifier_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<fully_specified_type_type_specifier_t> make(
    std::unique_ptr<type_specifier_t> &&type_specifier_0_
  ) {
    return std::make_unique<fully_specified_type_type_specifier_t>(
      std::move(type_specifier_0_)
    );
  }

};  // fully_specified_type_type_specifier_t

class fully_specified_type_type_qualifier_type_specifier_t: public fully_specified_type_t {

public:

  std::unique_ptr<type_qualifier_t> type_qualifier_0;

  std::unique_ptr<type_specifier_t> type_specifier_1;

  fully_specified_type_type_qualifier_type_specifier_t(
    std::unique_ptr<type_qualifier_t> &&type_qualifier_0_,
    std::unique_ptr<type_specifier_t> &&type_specifier_1_
  ): type_qualifier_0(std::move(type_qualifier_0_)),
     type_specifier_1(std::move(type_specifier_1_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<fully_specified_type_type_qualifier_type_specifier_t> make(
    std::unique_ptr<type_qualifier_t> &&type_qualifier_0_,
    std::unique_ptr<type_specifier_t> &&type_specifier_1_
  ) {
    return std::make_unique<fully_specified_type_type_qualifier_type_specifier_t>(
      std::move(type_qualifier_0_),
      std::move(type_specifier_1_)
    );
  }

};  // fully_specified_type_type_qualifier_type_specifier_t

}   // ast

}   // gliss
