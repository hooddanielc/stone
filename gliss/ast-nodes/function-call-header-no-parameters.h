#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "function-call-header.h"

namespace gliss {

namespace ast {

class function_call_header_t;

class function_call_header_no_parameters_t: public ast_t {

public:

  static constexpr int num_types = 2;

  template <int n, typename = void>
  struct pattern;

  template<int n>
  struct pattern<n, typename std::enable_if<n == 0>::type> {
    using type = function_call_header_no_parameters_function_call_header_void_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  template<int n>
  struct pattern<n, typename std::enable_if<n == 1>::type> {
    using type = function_call_header_no_parameters_function_call_header_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  virtual ~function_call_header_no_parameters_t() = default;

};  // function_call_header_no_parameters_t

class function_call_header_no_parameters_function_call_header_void_t: public function_call_header_no_parameters_t {

public:

  std::unique_ptr<function_call_header_t> function_call_header_0;

  std::unique_ptr<token_t> void_1;

  function_call_header_no_parameters_function_call_header_void_t(
    std::unique_ptr<function_call_header_t> &&function_call_header_0_,
    std::unique_ptr<token_t> &&void_1_
  ): function_call_header_0(std::move(function_call_header_0_)),
     void_1(std::move(void_1_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // function_call_header_no_parameters_function_call_header_void_t

class function_call_header_no_parameters_function_call_header_t: public function_call_header_no_parameters_t {

public:

  std::unique_ptr<function_call_header_t> function_call_header_0;

  function_call_header_no_parameters_function_call_header_t(
    std::unique_ptr<function_call_header_t> &&function_call_header_0_
  ): function_call_header_0(std::move(function_call_header_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // function_call_header_no_parameters_function_call_header_t

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> function_call_header_no_parameters_t::pattern<0>::list = {
  pattern_item_t<function_call_header_t>::get(),
  pattern_item_t<token_t>::get(token_t::uppercase_to_kind("VOID"))
};

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> function_call_header_no_parameters_t::pattern<1>::list = {
  pattern_item_t<function_call_header_t>::get()
};

}   // ast

}   // gliss
