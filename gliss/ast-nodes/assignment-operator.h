#pragma once


/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */
  

#include <vector>
#include "../ast.h"


namespace gliss {

namespace ast {

class assignment_operator_t: public ast_t {

public:

  static const std::vector<std::vector<any_pattern_item_t>> patterns;

  assignment_operator_t(
    const token_t &
  );

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // assignment_operator_t

const std::vector<std::vector<any_pattern_item_t>> assignment_operator_t::patterns = {
  {
    pattern_item_t<token_t>::get(token_t::uppercase_to_kind("EQUAL"))
  }, {
    pattern_item_t<token_t>::get(token_t::uppercase_to_kind("MUL_ASSIGN"))
  }, {
    pattern_item_t<token_t>::get(token_t::uppercase_to_kind("DIV_ASSIGN"))
  }, {
    pattern_item_t<token_t>::get(token_t::uppercase_to_kind("MOD_ASSIGN"))
  }, {
    pattern_item_t<token_t>::get(token_t::uppercase_to_kind("ADD_ASSIGN"))
  }, {
    pattern_item_t<token_t>::get(token_t::uppercase_to_kind("SUB_ASSIGN"))
  }, {
    pattern_item_t<token_t>::get(token_t::uppercase_to_kind("LEFT_ASSIGN"))
  }, {
    pattern_item_t<token_t>::get(token_t::uppercase_to_kind("RIGHT_ASSIGN"))
  }, {
    pattern_item_t<token_t>::get(token_t::uppercase_to_kind("AND_ASSIGN"))
  }, {
    pattern_item_t<token_t>::get(token_t::uppercase_to_kind("XOR_ASSIGN"))
  }, {
    pattern_item_t<token_t>::get(token_t::uppercase_to_kind("OR_ASSIGN"))
  }
};

}   // ast

}   // gliss
