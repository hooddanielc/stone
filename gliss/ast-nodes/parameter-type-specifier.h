#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "type-specifier.h"

/**
 * Patterns for parameter_type_specifier
 *
 * 1. type_specifier
 */

namespace gliss {

namespace ast {

class type_specifier_t;

class parameter_type_specifier_t: public ast_t {

public:

  static constexpr int rules = 1;

  static constexpr int id = 248;

  virtual ~parameter_type_specifier_t() = default;

};  // parameter_type_specifier_t

class parameter_type_specifier_type_specifier_t: public parameter_type_specifier_t {

public:

  std::unique_ptr<type_specifier_t> type_specifier_0;

  parameter_type_specifier_type_specifier_t(
    std::unique_ptr<type_specifier_t> &&type_specifier_0_
  ): type_specifier_0(std::move(type_specifier_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<parameter_type_specifier_type_specifier_t> make(
    std::unique_ptr<type_specifier_t> &&type_specifier_0_
  ) {
    return std::make_unique<parameter_type_specifier_type_specifier_t>(
      std::move(type_specifier_0_)
    );
  }

};  // parameter_type_specifier_type_specifier_t

}   // ast

}   // gliss
