#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "and-expression.h"

/**
 * Patterns for exclusive_or_expression
 *
 * 1. and_expression
 * 2. exclusive_or_expression CARET and_expression
 */

namespace gliss {

namespace ast {

class and_expression_t;

class exclusive_or_expression_t: public ast_t {

public:

  static constexpr int num_types = 2;

  virtual ~exclusive_or_expression_t() = default;

};  // exclusive_or_expression_t

class exclusive_or_expression_and_expression_t: public exclusive_or_expression_t {

public:

  std::unique_ptr<and_expression_t> and_expression_0;

  exclusive_or_expression_and_expression_t(
    std::unique_ptr<and_expression_t> &&and_expression_0_
  ): and_expression_0(std::move(and_expression_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<exclusive_or_expression_and_expression_t> make(
    std::unique_ptr<and_expression_t> &&and_expression_0_
  ) {
    return std::make_unique<exclusive_or_expression_and_expression_t>(
      std::move(and_expression_0_)
    );
  }

};  // exclusive_or_expression_and_expression_t

class exclusive_or_expression_exclusive_or_expression_caret_and_expression_t: public exclusive_or_expression_t {

public:

  std::unique_ptr<exclusive_or_expression_t> exclusive_or_expression_0;

  std::unique_ptr<token_t> caret_1;

  std::unique_ptr<and_expression_t> and_expression_2;

  exclusive_or_expression_exclusive_or_expression_caret_and_expression_t(
    std::unique_ptr<exclusive_or_expression_t> &&exclusive_or_expression_0_,
    std::unique_ptr<token_t> &&caret_1_,
    std::unique_ptr<and_expression_t> &&and_expression_2_
  ): exclusive_or_expression_0(std::move(exclusive_or_expression_0_)),
     caret_1(std::move(caret_1_)),
     and_expression_2(std::move(and_expression_2_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<exclusive_or_expression_exclusive_or_expression_caret_and_expression_t> make(
    std::unique_ptr<exclusive_or_expression_t> &&exclusive_or_expression_0_,
    const token_t *CARET_1_,
    std::unique_ptr<and_expression_t> &&and_expression_2_
  ) {
    return std::make_unique<exclusive_or_expression_exclusive_or_expression_caret_and_expression_t>(
      std::move(exclusive_or_expression_0_),
      std::make_unique<token_t>(*CARET_1_),
      std::move(and_expression_2_)
    );
  }

};  // exclusive_or_expression_exclusive_or_expression_caret_and_expression_t

}   // ast

}   // gliss
