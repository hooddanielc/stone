#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "function-call-generic.h"

/**
 * Patterns for function_call_or_method
 *
 * 1. function_call_generic
 */

namespace gliss {

namespace ast {

class function_call_generic_t;

class function_call_or_method_t: public ast_t {

public:

  static constexpr int num_types = 1;

  virtual ~function_call_or_method_t() = default;

};  // function_call_or_method_t

class function_call_or_method_function_call_generic_t: public function_call_or_method_t {

public:

  std::unique_ptr<function_call_generic_t> function_call_generic_0;

  function_call_or_method_function_call_generic_t(
    std::unique_ptr<function_call_generic_t> &&function_call_generic_0_
  ): function_call_generic_0(std::move(function_call_generic_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<function_call_or_method_function_call_generic_t> make(
    std::unique_ptr<function_call_generic_t> &&function_call_generic_0_
  ) {
    return std::make_unique<function_call_or_method_function_call_generic_t>(
      std::move(function_call_generic_0_)
    );
  }

};  // function_call_or_method_function_call_generic_t

}   // ast

}   // gliss
