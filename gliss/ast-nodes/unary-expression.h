#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "postfix-expression.h"

#include "unary-operator.h"

/**
 * Patterns for unary_expression
 *
 * 1. postfix_expression
 * 2. INC_OP unary_expression
 * 3. DEC_OP unary_expression
 * 4. unary_operator unary_expression
 */

namespace gliss {

namespace ast {

class postfix_expression_t;

class unary_operator_t;

class unary_expression_t: public ast_t {

public:

  static constexpr int rules = 4;

  static constexpr int id = 223;

  virtual ~unary_expression_t() = default;

};  // unary_expression_t

class unary_expression_postfix_expression_t: public unary_expression_t {

public:

  std::shared_ptr<postfix_expression_t> postfix_expression_0;

  unary_expression_postfix_expression_t(
    std::shared_ptr<postfix_expression_t> postfix_expression_0_
  ): postfix_expression_0(postfix_expression_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 223;
  }

  static std::shared_ptr<unary_expression_postfix_expression_t> make(
    std::shared_ptr<postfix_expression_t> postfix_expression_0_
  ) {
    return std::make_shared<unary_expression_postfix_expression_t>(
      postfix_expression_0_
    );
  }

};  // unary_expression_postfix_expression_t

class unary_expression_inc_op_unary_expression_t: public unary_expression_t {

public:

  std::shared_ptr<ast_token_t> inc_op_0;

  std::shared_ptr<unary_expression_t> unary_expression_1;

  unary_expression_inc_op_unary_expression_t(
    std::shared_ptr<ast_token_t> inc_op_0_,
    std::shared_ptr<unary_expression_t> unary_expression_1_
  ): inc_op_0(inc_op_0_),
     unary_expression_1(unary_expression_1_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 223;
  }

  static std::shared_ptr<unary_expression_inc_op_unary_expression_t> make(
    std::shared_ptr<ast_token_t> INC_OP_0_,
    std::shared_ptr<unary_expression_t> unary_expression_1_
  ) {
    return std::make_shared<unary_expression_inc_op_unary_expression_t>(
      INC_OP_0_,
      unary_expression_1_
    );
  }

};  // unary_expression_inc_op_unary_expression_t

class unary_expression_dec_op_unary_expression_t: public unary_expression_t {

public:

  std::shared_ptr<ast_token_t> dec_op_0;

  std::shared_ptr<unary_expression_t> unary_expression_1;

  unary_expression_dec_op_unary_expression_t(
    std::shared_ptr<ast_token_t> dec_op_0_,
    std::shared_ptr<unary_expression_t> unary_expression_1_
  ): dec_op_0(dec_op_0_),
     unary_expression_1(unary_expression_1_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 223;
  }

  static std::shared_ptr<unary_expression_dec_op_unary_expression_t> make(
    std::shared_ptr<ast_token_t> DEC_OP_0_,
    std::shared_ptr<unary_expression_t> unary_expression_1_
  ) {
    return std::make_shared<unary_expression_dec_op_unary_expression_t>(
      DEC_OP_0_,
      unary_expression_1_
    );
  }

};  // unary_expression_dec_op_unary_expression_t

class unary_expression_unary_operator_unary_expression_t: public unary_expression_t {

public:

  std::shared_ptr<unary_operator_t> unary_operator_0;

  std::shared_ptr<unary_expression_t> unary_expression_1;

  unary_expression_unary_operator_unary_expression_t(
    std::shared_ptr<unary_operator_t> unary_operator_0_,
    std::shared_ptr<unary_expression_t> unary_expression_1_
  ): unary_operator_0(unary_operator_0_),
     unary_expression_1(unary_expression_1_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 223;
  }

  static std::shared_ptr<unary_expression_unary_operator_unary_expression_t> make(
    std::shared_ptr<unary_operator_t> unary_operator_0_,
    std::shared_ptr<unary_expression_t> unary_expression_1_
  ) {
    return std::make_shared<unary_expression_unary_operator_unary_expression_t>(
      unary_operator_0_,
      unary_expression_1_
    );
  }

};  // unary_expression_unary_operator_unary_expression_t

}   // ast

}   // gliss
