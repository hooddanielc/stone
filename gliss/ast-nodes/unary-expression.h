#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "postfix-expression.h"

#include "unary-operator.h"

/**
 * Patterns for unary_expression
 *
 * 1. postfix_expression
 * 2. INC_OP unary_expression
 * 3. DEC_OP unary_expression
 * 4. unary_operator unary_expression
 */

namespace gliss {

namespace ast {

class postfix_expression_t;

class unary_operator_t;

class unary_expression_t: public ast_t {

public:

  static constexpr int rules = 4;

  static constexpr int id = 222;

  virtual ~unary_expression_t() = default;

};  // unary_expression_t

class unary_expression_postfix_expression_t: public unary_expression_t {

public:

  std::unique_ptr<postfix_expression_t> postfix_expression_0;

  unary_expression_postfix_expression_t(
    std::unique_ptr<postfix_expression_t> &&postfix_expression_0_
  ): postfix_expression_0(std::move(postfix_expression_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<unary_expression_postfix_expression_t> make(
    std::unique_ptr<postfix_expression_t> &&postfix_expression_0_
  ) {
    return std::make_unique<unary_expression_postfix_expression_t>(
      std::move(postfix_expression_0_)
    );
  }

};  // unary_expression_postfix_expression_t

class unary_expression_inc_op_unary_expression_t: public unary_expression_t {

public:

  std::unique_ptr<token_t> inc_op_0;

  std::unique_ptr<unary_expression_t> unary_expression_1;

  unary_expression_inc_op_unary_expression_t(
    std::unique_ptr<token_t> &&inc_op_0_,
    std::unique_ptr<unary_expression_t> &&unary_expression_1_
  ): inc_op_0(std::move(inc_op_0_)),
     unary_expression_1(std::move(unary_expression_1_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<unary_expression_inc_op_unary_expression_t> make(
    const token_t *INC_OP_0_,
    std::unique_ptr<unary_expression_t> &&unary_expression_1_
  ) {
    return std::make_unique<unary_expression_inc_op_unary_expression_t>(
      std::make_unique<token_t>(*INC_OP_0_),
      std::move(unary_expression_1_)
    );
  }

};  // unary_expression_inc_op_unary_expression_t

class unary_expression_dec_op_unary_expression_t: public unary_expression_t {

public:

  std::unique_ptr<token_t> dec_op_0;

  std::unique_ptr<unary_expression_t> unary_expression_1;

  unary_expression_dec_op_unary_expression_t(
    std::unique_ptr<token_t> &&dec_op_0_,
    std::unique_ptr<unary_expression_t> &&unary_expression_1_
  ): dec_op_0(std::move(dec_op_0_)),
     unary_expression_1(std::move(unary_expression_1_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<unary_expression_dec_op_unary_expression_t> make(
    const token_t *DEC_OP_0_,
    std::unique_ptr<unary_expression_t> &&unary_expression_1_
  ) {
    return std::make_unique<unary_expression_dec_op_unary_expression_t>(
      std::make_unique<token_t>(*DEC_OP_0_),
      std::move(unary_expression_1_)
    );
  }

};  // unary_expression_dec_op_unary_expression_t

class unary_expression_unary_operator_unary_expression_t: public unary_expression_t {

public:

  std::unique_ptr<unary_operator_t> unary_operator_0;

  std::unique_ptr<unary_expression_t> unary_expression_1;

  unary_expression_unary_operator_unary_expression_t(
    std::unique_ptr<unary_operator_t> &&unary_operator_0_,
    std::unique_ptr<unary_expression_t> &&unary_expression_1_
  ): unary_operator_0(std::move(unary_operator_0_)),
     unary_expression_1(std::move(unary_expression_1_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<unary_expression_unary_operator_unary_expression_t> make(
    std::unique_ptr<unary_operator_t> &&unary_operator_0_,
    std::unique_ptr<unary_expression_t> &&unary_expression_1_
  ) {
    return std::make_unique<unary_expression_unary_operator_unary_expression_t>(
      std::move(unary_operator_0_),
      std::move(unary_expression_1_)
    );
  }

};  // unary_expression_unary_operator_unary_expression_t

}   // ast

}   // gliss
