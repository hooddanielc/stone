#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "condition.h"
#include "nothing.h"

/**
 * Patterns for conditionopt
 *
 * 1. condition
 * 2. nothing
 */

namespace gliss {

namespace ast {

class condition_t;
class nothing_t;

class conditionopt_t: public ast_t {

public:

  static constexpr int rules = 2;

  static constexpr int id = 290;

  virtual ~conditionopt_t() = default;

};  // conditionopt_t

class conditionopt_condition_t: public conditionopt_t {

public:

  std::shared_ptr<condition_t> condition_0;

  conditionopt_condition_t(
    std::shared_ptr<condition_t> condition_0_
  ): condition_0(condition_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 290;
  }

  static std::shared_ptr<conditionopt_condition_t> make(
    std::shared_ptr<condition_t> condition_0_
  ) {
    return std::make_shared<conditionopt_condition_t>(
      condition_0_
    );
  }

};  // conditionopt_condition_t

class conditionopt_nothing_t: public conditionopt_t {

public:

  std::shared_ptr<nothing_t> nothing_0;

  conditionopt_nothing_t(
    std::shared_ptr<nothing_t> nothing_0_
  ): nothing_0(nothing_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 290;
  }

  static std::shared_ptr<conditionopt_nothing_t> make(
    std::shared_ptr<nothing_t> nothing_0_
  ) {
    return std::make_shared<conditionopt_nothing_t>(
      nothing_0_
    );
  }

};  // conditionopt_nothing_t

}   // ast

}   // gliss
