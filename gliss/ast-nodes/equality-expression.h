#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "relational-expression.h"

/**
 * Patterns for equality_expression
 *
 * 1. relational_expression
 * 2. equality_expression EQ_OP relational_expression
 * 3. equality_expression NE_OP relational_expression
 */

namespace gliss {

namespace ast {

class relational_expression_t;

class equality_expression_t: public ast_t {

public:

  static constexpr int num_types = 3;

  virtual ~equality_expression_t() = default;

};  // equality_expression_t

class equality_expression_relational_expression_t: public equality_expression_t {

public:

  std::unique_ptr<relational_expression_t> relational_expression_0;

  equality_expression_relational_expression_t(
    std::unique_ptr<relational_expression_t> &&relational_expression_0_
  ): relational_expression_0(std::move(relational_expression_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<equality_expression_relational_expression_t> make(
    std::unique_ptr<relational_expression_t> &&relational_expression_0_
  ) {
    return std::make_unique<equality_expression_relational_expression_t>(
      std::move(relational_expression_0_)
    );
  }

};  // equality_expression_relational_expression_t

class equality_expression_equality_expression_eq_op_relational_expression_t: public equality_expression_t {

public:

  std::unique_ptr<equality_expression_t> equality_expression_0;

  std::unique_ptr<token_t> eq_op_1;

  std::unique_ptr<relational_expression_t> relational_expression_2;

  equality_expression_equality_expression_eq_op_relational_expression_t(
    std::unique_ptr<equality_expression_t> &&equality_expression_0_,
    std::unique_ptr<token_t> &&eq_op_1_,
    std::unique_ptr<relational_expression_t> &&relational_expression_2_
  ): equality_expression_0(std::move(equality_expression_0_)),
     eq_op_1(std::move(eq_op_1_)),
     relational_expression_2(std::move(relational_expression_2_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<equality_expression_equality_expression_eq_op_relational_expression_t> make(
    std::unique_ptr<equality_expression_t> &&equality_expression_0_,
    const token_t *EQ_OP_1_,
    std::unique_ptr<relational_expression_t> &&relational_expression_2_
  ) {
    return std::make_unique<equality_expression_equality_expression_eq_op_relational_expression_t>(
      std::move(equality_expression_0_),
      std::make_unique<token_t>(*EQ_OP_1_),
      std::move(relational_expression_2_)
    );
  }

};  // equality_expression_equality_expression_eq_op_relational_expression_t

class equality_expression_equality_expression_ne_op_relational_expression_t: public equality_expression_t {

public:

  std::unique_ptr<equality_expression_t> equality_expression_0;

  std::unique_ptr<token_t> ne_op_1;

  std::unique_ptr<relational_expression_t> relational_expression_2;

  equality_expression_equality_expression_ne_op_relational_expression_t(
    std::unique_ptr<equality_expression_t> &&equality_expression_0_,
    std::unique_ptr<token_t> &&ne_op_1_,
    std::unique_ptr<relational_expression_t> &&relational_expression_2_
  ): equality_expression_0(std::move(equality_expression_0_)),
     ne_op_1(std::move(ne_op_1_)),
     relational_expression_2(std::move(relational_expression_2_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<equality_expression_equality_expression_ne_op_relational_expression_t> make(
    std::unique_ptr<equality_expression_t> &&equality_expression_0_,
    const token_t *NE_OP_1_,
    std::unique_ptr<relational_expression_t> &&relational_expression_2_
  ) {
    return std::make_unique<equality_expression_equality_expression_ne_op_relational_expression_t>(
      std::move(equality_expression_0_),
      std::make_unique<token_t>(*NE_OP_1_),
      std::move(relational_expression_2_)
    );
  }

};  // equality_expression_equality_expression_ne_op_relational_expression_t

}   // ast

}   // gliss
