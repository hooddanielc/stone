#pragma once


/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */
  

#include <vector>
#include "../ast.h"
#include "type-name-list.h"

namespace gliss {

namespace ast {

class storage_qualifier_subroutine_list_t: public ast_t {

public:

  static const std::vector<std::vector<any_pattern_item_t>> patterns;

  storage_qualifier_subroutine_list_t(
    const token_t &,
    const token_t &,
    const type_name_list_t &,
    const token_t &
  );

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // storage_qualifier_subroutine_list_t

const std::vector<std::vector<any_pattern_item_t>> storage_qualifier_subroutine_list_t::patterns = {
  {
    pattern_item_t<token_t>::get(token_t::uppercase_to_kind("SUBROUTINE")),
    pattern_item_t<token_t>::get(token_t::uppercase_to_kind("LEFT_PAREN")),
    pattern_item_t<type_name_list_t>::get(),
    pattern_item_t<token_t>::get(token_t::uppercase_to_kind("RIGHT_PAREN"))
  }
};

}   // ast

}   // gliss
