#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "type-name-list.h"

/**
 * Patterns for storage_qualifier
 *
 * 1. CONST
 * 2. INOUT
 * 3. IN
 * 4. OUT
 * 5. CENTROID
 * 6. PATCH
 * 7. SAMPLE
 * 8. UNIFORM
 * 9. BUFFER
 * 10. SHARED
 * 11. COHERENT
 * 12. VOLATILE
 * 13. RESTRICT
 * 14. READONLY
 * 15. WRITEONLY
 * 16. SUBROUTINE
 * 17. SUBROUTINE LEFT_PAREN type_name_list RIGHT_PAREN
 */

namespace gliss {

namespace ast {

class type_name_list_t;

class storage_qualifier_t: public ast_t {

public:

  static constexpr int rules = 17;

  static constexpr int id = 261;

  virtual ~storage_qualifier_t() = default;

};  // storage_qualifier_t

class storage_qualifier_const_t: public storage_qualifier_t {

public:

  std::shared_ptr<ast_token_t> const_0;

  storage_qualifier_const_t(
    std::shared_ptr<ast_token_t> const_0_
  ): const_0(const_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 261;
  }

  static std::shared_ptr<storage_qualifier_const_t> make(
    std::shared_ptr<ast_token_t> CONST_0_
  ) {
    return std::make_shared<storage_qualifier_const_t>(
      CONST_0_
    );
  }

};  // storage_qualifier_const_t

class storage_qualifier_inout_t: public storage_qualifier_t {

public:

  std::shared_ptr<ast_token_t> inout_0;

  storage_qualifier_inout_t(
    std::shared_ptr<ast_token_t> inout_0_
  ): inout_0(inout_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 261;
  }

  static std::shared_ptr<storage_qualifier_inout_t> make(
    std::shared_ptr<ast_token_t> INOUT_0_
  ) {
    return std::make_shared<storage_qualifier_inout_t>(
      INOUT_0_
    );
  }

};  // storage_qualifier_inout_t

class storage_qualifier_in_t: public storage_qualifier_t {

public:

  std::shared_ptr<ast_token_t> in_0;

  storage_qualifier_in_t(
    std::shared_ptr<ast_token_t> in_0_
  ): in_0(in_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 261;
  }

  static std::shared_ptr<storage_qualifier_in_t> make(
    std::shared_ptr<ast_token_t> IN_0_
  ) {
    return std::make_shared<storage_qualifier_in_t>(
      IN_0_
    );
  }

};  // storage_qualifier_in_t

class storage_qualifier_out_t: public storage_qualifier_t {

public:

  std::shared_ptr<ast_token_t> out_0;

  storage_qualifier_out_t(
    std::shared_ptr<ast_token_t> out_0_
  ): out_0(out_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 261;
  }

  static std::shared_ptr<storage_qualifier_out_t> make(
    std::shared_ptr<ast_token_t> OUT_0_
  ) {
    return std::make_shared<storage_qualifier_out_t>(
      OUT_0_
    );
  }

};  // storage_qualifier_out_t

class storage_qualifier_centroid_t: public storage_qualifier_t {

public:

  std::shared_ptr<ast_token_t> centroid_0;

  storage_qualifier_centroid_t(
    std::shared_ptr<ast_token_t> centroid_0_
  ): centroid_0(centroid_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 261;
  }

  static std::shared_ptr<storage_qualifier_centroid_t> make(
    std::shared_ptr<ast_token_t> CENTROID_0_
  ) {
    return std::make_shared<storage_qualifier_centroid_t>(
      CENTROID_0_
    );
  }

};  // storage_qualifier_centroid_t

class storage_qualifier_patch_t: public storage_qualifier_t {

public:

  std::shared_ptr<ast_token_t> patch_0;

  storage_qualifier_patch_t(
    std::shared_ptr<ast_token_t> patch_0_
  ): patch_0(patch_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 261;
  }

  static std::shared_ptr<storage_qualifier_patch_t> make(
    std::shared_ptr<ast_token_t> PATCH_0_
  ) {
    return std::make_shared<storage_qualifier_patch_t>(
      PATCH_0_
    );
  }

};  // storage_qualifier_patch_t

class storage_qualifier_sample_t: public storage_qualifier_t {

public:

  std::shared_ptr<ast_token_t> sample_0;

  storage_qualifier_sample_t(
    std::shared_ptr<ast_token_t> sample_0_
  ): sample_0(sample_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 261;
  }

  static std::shared_ptr<storage_qualifier_sample_t> make(
    std::shared_ptr<ast_token_t> SAMPLE_0_
  ) {
    return std::make_shared<storage_qualifier_sample_t>(
      SAMPLE_0_
    );
  }

};  // storage_qualifier_sample_t

class storage_qualifier_uniform_t: public storage_qualifier_t {

public:

  std::shared_ptr<ast_token_t> uniform_0;

  storage_qualifier_uniform_t(
    std::shared_ptr<ast_token_t> uniform_0_
  ): uniform_0(uniform_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 261;
  }

  static std::shared_ptr<storage_qualifier_uniform_t> make(
    std::shared_ptr<ast_token_t> UNIFORM_0_
  ) {
    return std::make_shared<storage_qualifier_uniform_t>(
      UNIFORM_0_
    );
  }

};  // storage_qualifier_uniform_t

class storage_qualifier_buffer_t: public storage_qualifier_t {

public:

  std::shared_ptr<ast_token_t> buffer_0;

  storage_qualifier_buffer_t(
    std::shared_ptr<ast_token_t> buffer_0_
  ): buffer_0(buffer_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 261;
  }

  static std::shared_ptr<storage_qualifier_buffer_t> make(
    std::shared_ptr<ast_token_t> BUFFER_0_
  ) {
    return std::make_shared<storage_qualifier_buffer_t>(
      BUFFER_0_
    );
  }

};  // storage_qualifier_buffer_t

class storage_qualifier_shared_t: public storage_qualifier_t {

public:

  std::shared_ptr<ast_token_t> shared_0;

  storage_qualifier_shared_t(
    std::shared_ptr<ast_token_t> shared_0_
  ): shared_0(shared_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 261;
  }

  static std::shared_ptr<storage_qualifier_shared_t> make(
    std::shared_ptr<ast_token_t> SHARED_0_
  ) {
    return std::make_shared<storage_qualifier_shared_t>(
      SHARED_0_
    );
  }

};  // storage_qualifier_shared_t

class storage_qualifier_coherent_t: public storage_qualifier_t {

public:

  std::shared_ptr<ast_token_t> coherent_0;

  storage_qualifier_coherent_t(
    std::shared_ptr<ast_token_t> coherent_0_
  ): coherent_0(coherent_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 261;
  }

  static std::shared_ptr<storage_qualifier_coherent_t> make(
    std::shared_ptr<ast_token_t> COHERENT_0_
  ) {
    return std::make_shared<storage_qualifier_coherent_t>(
      COHERENT_0_
    );
  }

};  // storage_qualifier_coherent_t

class storage_qualifier_volatile_t: public storage_qualifier_t {

public:

  std::shared_ptr<ast_token_t> volatile_0;

  storage_qualifier_volatile_t(
    std::shared_ptr<ast_token_t> volatile_0_
  ): volatile_0(volatile_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 261;
  }

  static std::shared_ptr<storage_qualifier_volatile_t> make(
    std::shared_ptr<ast_token_t> VOLATILE_0_
  ) {
    return std::make_shared<storage_qualifier_volatile_t>(
      VOLATILE_0_
    );
  }

};  // storage_qualifier_volatile_t

class storage_qualifier_restrict_t: public storage_qualifier_t {

public:

  std::shared_ptr<ast_token_t> restrict_0;

  storage_qualifier_restrict_t(
    std::shared_ptr<ast_token_t> restrict_0_
  ): restrict_0(restrict_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 261;
  }

  static std::shared_ptr<storage_qualifier_restrict_t> make(
    std::shared_ptr<ast_token_t> RESTRICT_0_
  ) {
    return std::make_shared<storage_qualifier_restrict_t>(
      RESTRICT_0_
    );
  }

};  // storage_qualifier_restrict_t

class storage_qualifier_readonly_t: public storage_qualifier_t {

public:

  std::shared_ptr<ast_token_t> readonly_0;

  storage_qualifier_readonly_t(
    std::shared_ptr<ast_token_t> readonly_0_
  ): readonly_0(readonly_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 261;
  }

  static std::shared_ptr<storage_qualifier_readonly_t> make(
    std::shared_ptr<ast_token_t> READONLY_0_
  ) {
    return std::make_shared<storage_qualifier_readonly_t>(
      READONLY_0_
    );
  }

};  // storage_qualifier_readonly_t

class storage_qualifier_writeonly_t: public storage_qualifier_t {

public:

  std::shared_ptr<ast_token_t> writeonly_0;

  storage_qualifier_writeonly_t(
    std::shared_ptr<ast_token_t> writeonly_0_
  ): writeonly_0(writeonly_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 261;
  }

  static std::shared_ptr<storage_qualifier_writeonly_t> make(
    std::shared_ptr<ast_token_t> WRITEONLY_0_
  ) {
    return std::make_shared<storage_qualifier_writeonly_t>(
      WRITEONLY_0_
    );
  }

};  // storage_qualifier_writeonly_t

class storage_qualifier_subroutine_t: public storage_qualifier_t {

public:

  std::shared_ptr<ast_token_t> subroutine_0;

  storage_qualifier_subroutine_t(
    std::shared_ptr<ast_token_t> subroutine_0_
  ): subroutine_0(subroutine_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 261;
  }

  static std::shared_ptr<storage_qualifier_subroutine_t> make(
    std::shared_ptr<ast_token_t> SUBROUTINE_0_
  ) {
    return std::make_shared<storage_qualifier_subroutine_t>(
      SUBROUTINE_0_
    );
  }

};  // storage_qualifier_subroutine_t

class storage_qualifier_subroutine_left_paren_type_name_list_right_paren_t: public storage_qualifier_t {

public:

  std::shared_ptr<ast_token_t> subroutine_0;

  std::shared_ptr<ast_token_t> left_paren_1;

  std::shared_ptr<type_name_list_t> type_name_list_2;

  std::shared_ptr<ast_token_t> right_paren_3;

  storage_qualifier_subroutine_left_paren_type_name_list_right_paren_t(
    std::shared_ptr<ast_token_t> subroutine_0_,
    std::shared_ptr<ast_token_t> left_paren_1_,
    std::shared_ptr<type_name_list_t> type_name_list_2_,
    std::shared_ptr<ast_token_t> right_paren_3_
  ): subroutine_0(subroutine_0_),
     left_paren_1(left_paren_1_),
     type_name_list_2(type_name_list_2_),
     right_paren_3(right_paren_3_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 261;
  }

  static std::shared_ptr<storage_qualifier_subroutine_left_paren_type_name_list_right_paren_t> make(
    std::shared_ptr<ast_token_t> SUBROUTINE_0_,
    std::shared_ptr<ast_token_t> LEFT_PAREN_1_,
    std::shared_ptr<type_name_list_t> type_name_list_2_,
    std::shared_ptr<ast_token_t> RIGHT_PAREN_3_
  ) {
    return std::make_shared<storage_qualifier_subroutine_left_paren_type_name_list_right_paren_t>(
      SUBROUTINE_0_,
      LEFT_PAREN_1_,
      type_name_list_2_,
      RIGHT_PAREN_3_
    );
  }

};  // storage_qualifier_subroutine_left_paren_type_name_list_right_paren_t

}   // ast

}   // gliss
