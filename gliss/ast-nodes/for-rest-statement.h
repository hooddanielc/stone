#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "conditionopt.h"
#include "expression.h"

/**
 * Patterns for for_rest_statement
 *
 * 1. conditionopt SEMICOLON
 * 2. conditionopt SEMICOLON expression
 */

namespace gliss {

namespace ast {

class conditionopt_t;
class expression_t;

class for_rest_statement_t: public ast_t {

public:

  static constexpr int rules = 2;

  static constexpr int id = 290;

  virtual ~for_rest_statement_t() = default;

};  // for_rest_statement_t

class for_rest_statement_conditionopt_semicolon_t: public for_rest_statement_t {

public:

  std::unique_ptr<conditionopt_t> conditionopt_0;

  std::unique_ptr<token_t> semicolon_1;

  for_rest_statement_conditionopt_semicolon_t(
    std::unique_ptr<conditionopt_t> &&conditionopt_0_,
    std::unique_ptr<token_t> &&semicolon_1_
  ): conditionopt_0(std::move(conditionopt_0_)),
     semicolon_1(std::move(semicolon_1_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<for_rest_statement_conditionopt_semicolon_t> make(
    std::unique_ptr<conditionopt_t> &&conditionopt_0_,
    const token_t *SEMICOLON_1_
  ) {
    return std::make_unique<for_rest_statement_conditionopt_semicolon_t>(
      std::move(conditionopt_0_),
      std::make_unique<token_t>(*SEMICOLON_1_)
    );
  }

};  // for_rest_statement_conditionopt_semicolon_t

class for_rest_statement_conditionopt_semicolon_expression_t: public for_rest_statement_t {

public:

  std::unique_ptr<conditionopt_t> conditionopt_0;

  std::unique_ptr<token_t> semicolon_1;

  std::unique_ptr<expression_t> expression_2;

  for_rest_statement_conditionopt_semicolon_expression_t(
    std::unique_ptr<conditionopt_t> &&conditionopt_0_,
    std::unique_ptr<token_t> &&semicolon_1_,
    std::unique_ptr<expression_t> &&expression_2_
  ): conditionopt_0(std::move(conditionopt_0_)),
     semicolon_1(std::move(semicolon_1_)),
     expression_2(std::move(expression_2_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<for_rest_statement_conditionopt_semicolon_expression_t> make(
    std::unique_ptr<conditionopt_t> &&conditionopt_0_,
    const token_t *SEMICOLON_1_,
    std::unique_ptr<expression_t> &&expression_2_
  ) {
    return std::make_unique<for_rest_statement_conditionopt_semicolon_expression_t>(
      std::move(conditionopt_0_),
      std::make_unique<token_t>(*SEMICOLON_1_),
      std::move(expression_2_)
    );
  }

};  // for_rest_statement_conditionopt_semicolon_expression_t

}   // ast

}   // gliss
