#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "conditionopt.h"
#include "expression.h"

/**
 * Patterns for for_rest_statement
 *
 * 1. conditionopt SEMICOLON
 * 2. conditionopt SEMICOLON expression
 */

namespace gliss {

namespace ast {

class conditionopt_t;
class expression_t;

class for_rest_statement_t: public ast_t {

public:

  static constexpr int rules = 2;

  static constexpr int id = 291;

  virtual ~for_rest_statement_t() = default;

};  // for_rest_statement_t

class for_rest_statement_conditionopt_semicolon_t: public for_rest_statement_t {

public:

  std::shared_ptr<conditionopt_t> conditionopt_0;

  std::shared_ptr<ast_token_t> semicolon_1;

  for_rest_statement_conditionopt_semicolon_t(
    std::shared_ptr<conditionopt_t> conditionopt_0_,
    std::shared_ptr<ast_token_t> semicolon_1_
  ): conditionopt_0(conditionopt_0_),
     semicolon_1(semicolon_1_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 291;
  }

  static std::shared_ptr<for_rest_statement_conditionopt_semicolon_t> make(
    std::shared_ptr<conditionopt_t> conditionopt_0_,
    std::shared_ptr<ast_token_t> SEMICOLON_1_
  ) {
    return std::make_shared<for_rest_statement_conditionopt_semicolon_t>(
      conditionopt_0_,
      SEMICOLON_1_
    );
  }

};  // for_rest_statement_conditionopt_semicolon_t

class for_rest_statement_conditionopt_semicolon_expression_t: public for_rest_statement_t {

public:

  std::shared_ptr<conditionopt_t> conditionopt_0;

  std::shared_ptr<ast_token_t> semicolon_1;

  std::shared_ptr<expression_t> expression_2;

  for_rest_statement_conditionopt_semicolon_expression_t(
    std::shared_ptr<conditionopt_t> conditionopt_0_,
    std::shared_ptr<ast_token_t> semicolon_1_,
    std::shared_ptr<expression_t> expression_2_
  ): conditionopt_0(conditionopt_0_),
     semicolon_1(semicolon_1_),
     expression_2(expression_2_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 291;
  }

  static std::shared_ptr<for_rest_statement_conditionopt_semicolon_expression_t> make(
    std::shared_ptr<conditionopt_t> conditionopt_0_,
    std::shared_ptr<ast_token_t> SEMICOLON_1_,
    std::shared_ptr<expression_t> expression_2_
  ) {
    return std::make_shared<for_rest_statement_conditionopt_semicolon_expression_t>(
      conditionopt_0_,
      SEMICOLON_1_,
      expression_2_
    );
  }

};  // for_rest_statement_conditionopt_semicolon_expression_t

}   // ast

}   // gliss
