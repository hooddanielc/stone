#pragma once


/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */
  

#include <vector>
#include "../ast.h"
#include "expression-statement.h"
#include "declaration-statement.h"

namespace gliss {

namespace ast {

class expression_statement_t;
class declaration_statement_t;

class for_init_statement_t: public ast_t {

public:

  static constexpr int num_types = 2;

  template <int n, typename = void>
  struct pattern;

  template<int n>
  struct pattern<n, typename std::enable_if<n == 0>::type> {
    using type = for_init_statement_expression_statement_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  template<int n>
  struct pattern<n, typename std::enable_if<n == 1>::type> {
    using type = for_init_statement_declaration_statement_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  virtual ~for_init_statement_t() = default;

};  // for_init_statement_t


class for_init_statement_expression_statement_t: public for_init_statement_t {

public:

  std::unique_ptr<expression_statement_t> expression_statement_0;

  for_init_statement_expression_statement_t(
    std::unique_ptr<expression_statement_t> &&expression_statement_0_
  ): expression_statement_0(std::move(expression_statement_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // for_init_statement_expression_statement_t
  

class for_init_statement_declaration_statement_t: public for_init_statement_t {

public:

  std::unique_ptr<declaration_statement_t> declaration_statement_0;

  for_init_statement_declaration_statement_t(
    std::unique_ptr<declaration_statement_t> &&declaration_statement_0_
  ): declaration_statement_0(std::move(declaration_statement_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // for_init_statement_declaration_statement_t
  

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> for_init_statement_t::pattern<0>::list = {
  pattern_item_t<expression_statement_t>::get()
};

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> for_init_statement_t::pattern<1>::list = {
  pattern_item_t<declaration_statement_t>::get()
};

}   // ast

}   // gliss
