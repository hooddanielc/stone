#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "function-definition.h"
#include "declaration.h"

/**
 * Patterns for external_declaration
 *
 * 1. function_definition
 * 2. declaration
 * 3. SEMICOLON
 */

namespace gliss {

namespace ast {

class function_definition_t;
class declaration_t;

class external_declaration_t: public ast_t {

public:

  static constexpr int num_types = 3;

  virtual ~external_declaration_t() = default;

};  // external_declaration_t

class external_declaration_function_definition_t: public external_declaration_t {

public:

  std::unique_ptr<function_definition_t> function_definition_0;

  external_declaration_function_definition_t(
    std::unique_ptr<function_definition_t> &&function_definition_0_
  ): function_definition_0(std::move(function_definition_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<external_declaration_function_definition_t> make(
    std::unique_ptr<function_definition_t> &&function_definition_0_
  ) {
    return std::make_unique<external_declaration_function_definition_t>(
      std::move(function_definition_0_)
    );
  }

};  // external_declaration_function_definition_t

class external_declaration_declaration_t: public external_declaration_t {

public:

  std::unique_ptr<declaration_t> declaration_0;

  external_declaration_declaration_t(
    std::unique_ptr<declaration_t> &&declaration_0_
  ): declaration_0(std::move(declaration_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<external_declaration_declaration_t> make(
    std::unique_ptr<declaration_t> &&declaration_0_
  ) {
    return std::make_unique<external_declaration_declaration_t>(
      std::move(declaration_0_)
    );
  }

};  // external_declaration_declaration_t

class external_declaration_semicolon_t: public external_declaration_t {

public:

  std::unique_ptr<token_t> semicolon_0;

  external_declaration_semicolon_t(
    std::unique_ptr<token_t> &&semicolon_0_
  ): semicolon_0(std::move(semicolon_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<external_declaration_semicolon_t> make(
    const token_t *SEMICOLON_0_
  ) {
    return std::make_unique<external_declaration_semicolon_t>(
      std::make_unique<token_t>(*SEMICOLON_0_)
    );
  }

};  // external_declaration_semicolon_t

}   // ast

}   // gliss
