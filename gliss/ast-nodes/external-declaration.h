#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "function-definition.h"
#include "declaration.h"

/**
 * Patterns for external_declaration
 *
 * 1. function_definition
 * 2. declaration
 * 3. SEMICOLON
 */

namespace gliss {

namespace ast {

class function_definition_t;
class declaration_t;

class external_declaration_t: public ast_t {

public:

  static constexpr int rules = 3;

  static constexpr int id = 294;

  virtual ~external_declaration_t() = default;

};  // external_declaration_t

class external_declaration_function_definition_t: public external_declaration_t {

public:

  std::shared_ptr<function_definition_t> function_definition_0;

  external_declaration_function_definition_t(
    std::shared_ptr<function_definition_t> function_definition_0_
  ): function_definition_0(function_definition_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 294;
  }

  static std::shared_ptr<external_declaration_function_definition_t> make(
    std::shared_ptr<function_definition_t> function_definition_0_
  ) {
    return std::make_shared<external_declaration_function_definition_t>(
      function_definition_0_
    );
  }

};  // external_declaration_function_definition_t

class external_declaration_declaration_t: public external_declaration_t {

public:

  std::shared_ptr<declaration_t> declaration_0;

  external_declaration_declaration_t(
    std::shared_ptr<declaration_t> declaration_0_
  ): declaration_0(declaration_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 294;
  }

  static std::shared_ptr<external_declaration_declaration_t> make(
    std::shared_ptr<declaration_t> declaration_0_
  ) {
    return std::make_shared<external_declaration_declaration_t>(
      declaration_0_
    );
  }

};  // external_declaration_declaration_t

class external_declaration_semicolon_t: public external_declaration_t {

public:

  std::shared_ptr<ast_token_t> semicolon_0;

  external_declaration_semicolon_t(
    std::shared_ptr<ast_token_t> semicolon_0_
  ): semicolon_0(semicolon_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 294;
  }

  static std::shared_ptr<external_declaration_semicolon_t> make(
    std::shared_ptr<ast_token_t> SEMICOLON_0_
  ) {
    return std::make_shared<external_declaration_semicolon_t>(
      SEMICOLON_0_
    );
  }

};  // external_declaration_semicolon_t

}   // ast

}   // gliss
