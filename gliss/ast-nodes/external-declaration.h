#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "function-definition.h"
#include "declaration.h"

namespace gliss {

namespace ast {

class function_definition_t;
class declaration_t;

class external_declaration_t: public ast_t {

public:

  static constexpr int num_types = 3;

  template <int n, typename = void>
  struct pattern;

  template<int n>
  struct pattern<n, typename std::enable_if<n == 0>::type> {
    using type = external_declaration_function_definition_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  template<int n>
  struct pattern<n, typename std::enable_if<n == 1>::type> {
    using type = external_declaration_declaration_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  template<int n>
  struct pattern<n, typename std::enable_if<n == 2>::type> {
    using type = external_declaration_semicolon_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  virtual ~external_declaration_t() = default;

};  // external_declaration_t

class external_declaration_function_definition_t: public external_declaration_t {

public:

  std::unique_ptr<function_definition_t> function_definition_0;

  external_declaration_function_definition_t(
    std::unique_ptr<function_definition_t> &&function_definition_0_
  ): function_definition_0(std::move(function_definition_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // external_declaration_function_definition_t

class external_declaration_declaration_t: public external_declaration_t {

public:

  std::unique_ptr<declaration_t> declaration_0;

  external_declaration_declaration_t(
    std::unique_ptr<declaration_t> &&declaration_0_
  ): declaration_0(std::move(declaration_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // external_declaration_declaration_t

class external_declaration_semicolon_t: public external_declaration_t {

public:

  std::unique_ptr<token_t> semicolon_0;

  external_declaration_semicolon_t(
    std::unique_ptr<token_t> &&semicolon_0_
  ): semicolon_0(std::move(semicolon_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // external_declaration_semicolon_t

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> external_declaration_t::pattern<0>::list = {
  pattern_item_t<function_definition_t>::get()
};

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> external_declaration_t::pattern<1>::list = {
  pattern_item_t<declaration_t>::get()
};

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> external_declaration_t::pattern<2>::list = {
  pattern_item_t<token_t>::get(token_t::uppercase_to_kind("SEMICOLON"))
};

}   // ast

}   // gliss
