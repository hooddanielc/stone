#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "layout-qualifier-id.h"

/**
 * Patterns for layout_qualifier_id_list
 *
 * 1. layout_qualifier_id
 * 2. layout_qualifier_id_list COMMA layout_qualifier_id
 */

namespace gliss {

namespace ast {

class layout_qualifier_id_t;

class layout_qualifier_id_list_t: public ast_t {

public:

  static constexpr int num_types = 2;

  virtual ~layout_qualifier_id_list_t() = default;

};  // layout_qualifier_id_list_t

class layout_qualifier_id_list_layout_qualifier_id_t: public layout_qualifier_id_list_t {

public:

  std::unique_ptr<layout_qualifier_id_t> layout_qualifier_id_0;

  layout_qualifier_id_list_layout_qualifier_id_t(
    std::unique_ptr<layout_qualifier_id_t> &&layout_qualifier_id_0_
  ): layout_qualifier_id_0(std::move(layout_qualifier_id_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<layout_qualifier_id_list_layout_qualifier_id_t> make(
    std::unique_ptr<layout_qualifier_id_t> &&layout_qualifier_id_0_
  ) {
    return std::make_unique<layout_qualifier_id_list_layout_qualifier_id_t>(
      std::move(layout_qualifier_id_0_)
    );
  }

};  // layout_qualifier_id_list_layout_qualifier_id_t

class layout_qualifier_id_list_layout_qualifier_id_list_comma_layout_qualifier_id_t: public layout_qualifier_id_list_t {

public:

  std::unique_ptr<layout_qualifier_id_list_t> layout_qualifier_id_list_0;

  std::unique_ptr<token_t> comma_1;

  std::unique_ptr<layout_qualifier_id_t> layout_qualifier_id_2;

  layout_qualifier_id_list_layout_qualifier_id_list_comma_layout_qualifier_id_t(
    std::unique_ptr<layout_qualifier_id_list_t> &&layout_qualifier_id_list_0_,
    std::unique_ptr<token_t> &&comma_1_,
    std::unique_ptr<layout_qualifier_id_t> &&layout_qualifier_id_2_
  ): layout_qualifier_id_list_0(std::move(layout_qualifier_id_list_0_)),
     comma_1(std::move(comma_1_)),
     layout_qualifier_id_2(std::move(layout_qualifier_id_2_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<layout_qualifier_id_list_layout_qualifier_id_list_comma_layout_qualifier_id_t> make(
    std::unique_ptr<layout_qualifier_id_list_t> &&layout_qualifier_id_list_0_,
    const token_t *COMMA_1_,
    std::unique_ptr<layout_qualifier_id_t> &&layout_qualifier_id_2_
  ) {
    return std::make_unique<layout_qualifier_id_list_layout_qualifier_id_list_comma_layout_qualifier_id_t>(
      std::move(layout_qualifier_id_list_0_),
      std::make_unique<token_t>(*COMMA_1_),
      std::move(layout_qualifier_id_2_)
    );
  }

};  // layout_qualifier_id_list_layout_qualifier_id_list_comma_layout_qualifier_id_t

}   // ast

}   // gliss
