#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "function-call-or-method.h"

/**
 * Patterns for function_call
 *
 * 1. function_call_or_method
 */

namespace gliss {

namespace ast {

class function_call_or_method_t;

class function_call_t: public ast_t {

public:

  static constexpr int rules = 1;

  static constexpr int id = 216;

  virtual ~function_call_t() = default;

};  // function_call_t

class function_call_function_call_or_method_t: public function_call_t {

public:

  std::shared_ptr<function_call_or_method_t> function_call_or_method_0;

  function_call_function_call_or_method_t(
    std::shared_ptr<function_call_or_method_t> function_call_or_method_0_
  ): function_call_or_method_0(function_call_or_method_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 216;
  }

  static std::shared_ptr<function_call_function_call_or_method_t> make(
    std::shared_ptr<function_call_or_method_t> function_call_or_method_0_
  ) {
    return std::make_shared<function_call_function_call_or_method_t>(
      function_call_or_method_0_
    );
  }

};  // function_call_function_call_or_method_t

}   // ast

}   // gliss
