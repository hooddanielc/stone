#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "function-header.h"
#include "function-header-with-parameters.h"

/**
 * Patterns for function_declarator
 *
 * 1. function_header
 * 2. function_header_with_parameters
 */

namespace gliss {

namespace ast {

class function_header_t;
class function_header_with_parameters_t;

class function_declarator_t: public ast_t {

public:

  static constexpr int num_types = 2;

  virtual ~function_declarator_t() = default;

};  // function_declarator_t

class function_declarator_function_header_t: public function_declarator_t {

public:

  std::unique_ptr<function_header_t> function_header_0;

  function_declarator_function_header_t(
    std::unique_ptr<function_header_t> &&function_header_0_
  ): function_header_0(std::move(function_header_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<function_declarator_function_header_t> make(
    std::unique_ptr<function_header_t> &&function_header_0_
  ) {
    return std::make_unique<function_declarator_function_header_t>(
      std::move(function_header_0_)
    );
  }

};  // function_declarator_function_header_t

class function_declarator_function_header_with_parameters_t: public function_declarator_t {

public:

  std::unique_ptr<function_header_with_parameters_t> function_header_with_parameters_0;

  function_declarator_function_header_with_parameters_t(
    std::unique_ptr<function_header_with_parameters_t> &&function_header_with_parameters_0_
  ): function_header_with_parameters_0(std::move(function_header_with_parameters_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<function_declarator_function_header_with_parameters_t> make(
    std::unique_ptr<function_header_with_parameters_t> &&function_header_with_parameters_0_
  ) {
    return std::make_unique<function_declarator_function_header_with_parameters_t>(
      std::move(function_header_with_parameters_0_)
    );
  }

};  // function_declarator_function_header_with_parameters_t

}   // ast

}   // gliss
