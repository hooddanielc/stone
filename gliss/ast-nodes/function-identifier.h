#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "type-specifier.h"
#include "postfix-expression.h"

/**
 * Patterns for function_identifier
 *
 * 1. type_specifier
 * 2. postfix_expression
 */

namespace gliss {

namespace ast {

class type_specifier_t;
class postfix_expression_t;

class function_identifier_t: public ast_t {

public:

  static constexpr int rules = 2;

  static constexpr int id = 222;

  virtual ~function_identifier_t() = default;

};  // function_identifier_t

class function_identifier_type_specifier_t: public function_identifier_t {

public:

  std::shared_ptr<type_specifier_t> type_specifier_0;

  function_identifier_type_specifier_t(
    std::shared_ptr<type_specifier_t> type_specifier_0_
  ): type_specifier_0(type_specifier_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 222;
  }

  static std::shared_ptr<function_identifier_type_specifier_t> make(
    std::shared_ptr<type_specifier_t> type_specifier_0_
  ) {
    return std::make_shared<function_identifier_type_specifier_t>(
      type_specifier_0_
    );
  }

};  // function_identifier_type_specifier_t

class function_identifier_postfix_expression_t: public function_identifier_t {

public:

  std::shared_ptr<postfix_expression_t> postfix_expression_0;

  function_identifier_postfix_expression_t(
    std::shared_ptr<postfix_expression_t> postfix_expression_0_
  ): postfix_expression_0(postfix_expression_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 222;
  }

  static std::shared_ptr<function_identifier_postfix_expression_t> make(
    std::shared_ptr<postfix_expression_t> postfix_expression_0_
  ) {
    return std::make_shared<function_identifier_postfix_expression_t>(
      postfix_expression_0_
    );
  }

};  // function_identifier_postfix_expression_t

}   // ast

}   // gliss
