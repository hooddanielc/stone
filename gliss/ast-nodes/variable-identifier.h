#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"

/**
 * Patterns for variable_identifier
 *
 * 1. IDENTIFIER
 */

namespace gliss {

namespace ast {

class variable_identifier_t: public ast_t {

public:

  static constexpr int rules = 1;

  static constexpr int id = 212;

  virtual ~variable_identifier_t() = default;

};  // variable_identifier_t

class variable_identifier_identifier_t: public variable_identifier_t {

public:

  std::shared_ptr<ast_token_t> identifier_0;

  variable_identifier_identifier_t(
    std::shared_ptr<ast_token_t> identifier_0_
  ): identifier_0(identifier_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 212;
  }

  static std::shared_ptr<variable_identifier_identifier_t> make(
    std::shared_ptr<ast_token_t> IDENTIFIER_0_
  ) {
    return std::make_shared<variable_identifier_identifier_t>(
      IDENTIFIER_0_
    );
  }

};  // variable_identifier_identifier_t

}   // ast

}   // gliss
