#pragma once


/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */
  

#include <vector>
#include "../ast.h"


namespace gliss {

namespace ast {



class variable_identifier_t: public ast_t {

public:

  static constexpr int num_types = 1;

  template <int n, typename = void>
  struct pattern;

  template<int n>
  struct pattern<n, typename std::enable_if<n == 0>::type> {
    using type = variable_identifier_identifier_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  virtual ~variable_identifier_t() = default;

};  // variable_identifier_t


class variable_identifier_identifier_t: public variable_identifier_t {

public:

  std::unique_ptr<token_t> identifier_0;

  variable_identifier_identifier_t(
    std::unique_ptr<token_t> &&identifier_0_
  ): identifier_0(std::move(identifier_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // variable_identifier_identifier_t
  

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> variable_identifier_t::pattern<0>::list = {
  pattern_item_t<token_t>::get(token_t::uppercase_to_kind("IDENTIFIER"))
};

}   // ast

}   // gliss
