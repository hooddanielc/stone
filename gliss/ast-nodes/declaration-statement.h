#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "declaration.h"

/**
 * Patterns for declaration_statement
 *
 * 1. declaration
 */

namespace gliss {

namespace ast {

class declaration_t;

class declaration_statement_t: public ast_t {

public:

  static constexpr int rules = 1;

  static constexpr int id = 274;

  virtual ~declaration_statement_t() = default;

};  // declaration_statement_t

class declaration_statement_declaration_t: public declaration_statement_t {

public:

  std::shared_ptr<declaration_t> declaration_0;

  declaration_statement_declaration_t(
    std::shared_ptr<declaration_t> declaration_0_
  ): declaration_0(declaration_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 274;
  }

  static std::shared_ptr<declaration_statement_declaration_t> make(
    std::shared_ptr<declaration_t> declaration_0_
  ) {
    return std::make_shared<declaration_statement_declaration_t>(
      declaration_0_
    );
  }

};  // declaration_statement_declaration_t

}   // ast

}   // gliss
