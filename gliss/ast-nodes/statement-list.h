#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "statement.h"

/**
 * Patterns for statement_list
 *
 * 1. statement
 * 2. statement_list statement
 */

namespace gliss {

namespace ast {

class statement_t;

class statement_list_t: public ast_t {

public:

  static constexpr int rules = 2;

  static constexpr int id = 279;

  virtual ~statement_list_t() = default;

};  // statement_list_t

class statement_list_statement_t: public statement_list_t {

public:

  std::unique_ptr<statement_t> statement_0;

  statement_list_statement_t(
    std::unique_ptr<statement_t> &&statement_0_
  ): statement_0(std::move(statement_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<statement_list_statement_t> make(
    std::unique_ptr<statement_t> &&statement_0_
  ) {
    return std::make_unique<statement_list_statement_t>(
      std::move(statement_0_)
    );
  }

};  // statement_list_statement_t

class statement_list_statement_list_statement_t: public statement_list_t {

public:

  std::unique_ptr<statement_list_t> statement_list_0;

  std::unique_ptr<statement_t> statement_1;

  statement_list_statement_list_statement_t(
    std::unique_ptr<statement_list_t> &&statement_list_0_,
    std::unique_ptr<statement_t> &&statement_1_
  ): statement_list_0(std::move(statement_list_0_)),
     statement_1(std::move(statement_1_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<statement_list_statement_list_statement_t> make(
    std::unique_ptr<statement_list_t> &&statement_list_0_,
    std::unique_ptr<statement_t> &&statement_1_
  ) {
    return std::make_unique<statement_list_statement_list_statement_t>(
      std::move(statement_list_0_),
      std::move(statement_1_)
    );
  }

};  // statement_list_statement_list_statement_t

}   // ast

}   // gliss
