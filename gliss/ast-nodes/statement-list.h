#pragma once


/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */
  

#include <vector>
#include "../ast.h"
#include "statement.h"


namespace gliss {

namespace ast {

class statement_t;


class statement_list_t: public ast_t {

public:

  static constexpr int num_types = 2;

  template <int n, typename = void>
  struct pattern;

  template<int n>
  struct pattern<n, typename std::enable_if<n == 0>::type> {
    using type = statement_list_statement_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  template<int n>
  struct pattern<n, typename std::enable_if<n == 1>::type> {
    using type = statement_list_statement_list_statement_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  virtual ~statement_list_t() = default;

};  // statement_list_t


class statement_list_statement_t: public statement_list_t {

public:

  std::unique_ptr<statement_t> statement_0;

  statement_list_statement_t(
    std::unique_ptr<statement_t> &&statement_0_
  ): statement_0(std::move(statement_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // statement_list_statement_t
  

class statement_list_statement_list_statement_t: public statement_list_t {

public:

  std::unique_ptr<statement_list_t> statement_list_0;

  std::unique_ptr<statement_t> statement_1;

  statement_list_statement_list_statement_t(
    std::unique_ptr<statement_list_t> &&statement_list_0_,
    std::unique_ptr<statement_t> &&statement_1_
  ): statement_list_0(std::move(statement_list_0_)),
     statement_1(std::move(statement_1_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // statement_list_statement_list_statement_t
  

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> statement_list_t::pattern<0>::list = {
  pattern_item_t<statement_t>::get()
};

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> statement_list_t::pattern<1>::list = {
  pattern_item_t<statement_list_t>::get(),
  pattern_item_t<statement_t>::get()
};

}   // ast

}   // gliss
