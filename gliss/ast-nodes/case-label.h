#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "expression.h"

/**
 * Patterns for case_label
 *
 * 1. CASE expression COLON
 * 2. DEFAULT COLON
 */

namespace gliss {

namespace ast {

class expression_t;

class case_label_t: public ast_t {

public:

  static constexpr int rules = 2;

  static constexpr int id = 287;

  virtual ~case_label_t() = default;

};  // case_label_t

class case_label_case_expression_colon_t: public case_label_t {

public:

  std::shared_ptr<ast_token_t> case_0;

  std::shared_ptr<expression_t> expression_1;

  std::shared_ptr<ast_token_t> colon_2;

  case_label_case_expression_colon_t(
    std::shared_ptr<ast_token_t> case_0_,
    std::shared_ptr<expression_t> expression_1_,
    std::shared_ptr<ast_token_t> colon_2_
  ): case_0(case_0_),
     expression_1(expression_1_),
     colon_2(colon_2_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 287;
  }

  static std::shared_ptr<case_label_case_expression_colon_t> make(
    std::shared_ptr<ast_token_t> CASE_0_,
    std::shared_ptr<expression_t> expression_1_,
    std::shared_ptr<ast_token_t> COLON_2_
  ) {
    return std::make_shared<case_label_case_expression_colon_t>(
      CASE_0_,
      expression_1_,
      COLON_2_
    );
  }

};  // case_label_case_expression_colon_t

class case_label_default_colon_t: public case_label_t {

public:

  std::shared_ptr<ast_token_t> default_0;

  std::shared_ptr<ast_token_t> colon_1;

  case_label_default_colon_t(
    std::shared_ptr<ast_token_t> default_0_,
    std::shared_ptr<ast_token_t> colon_1_
  ): default_0(default_0_),
     colon_1(colon_1_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 287;
  }

  static std::shared_ptr<case_label_default_colon_t> make(
    std::shared_ptr<ast_token_t> DEFAULT_0_,
    std::shared_ptr<ast_token_t> COLON_1_
  ) {
    return std::make_shared<case_label_default_colon_t>(
      DEFAULT_0_,
      COLON_1_
    );
  }

};  // case_label_default_colon_t

}   // ast

}   // gliss
