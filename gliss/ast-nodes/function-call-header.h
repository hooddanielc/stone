#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "function-identifier.h"

namespace gliss {

namespace ast {

class function_identifier_t;

class function_call_header_t: public ast_t {

public:

  static constexpr int num_types = 1;

  template <int n, typename = void>
  struct pattern;

  template<int n>
  struct pattern<n, typename std::enable_if<n == 0>::type> {
    using type = function_call_header_function_identifier_left_paren_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  virtual ~function_call_header_t() = default;

};  // function_call_header_t

class function_call_header_function_identifier_left_paren_t: public function_call_header_t {

public:

  std::unique_ptr<function_identifier_t> function_identifier_0;

  std::unique_ptr<token_t> left_paren_1;

  function_call_header_function_identifier_left_paren_t(
    std::unique_ptr<function_identifier_t> &&function_identifier_0_,
    std::unique_ptr<token_t> &&left_paren_1_
  ): function_identifier_0(std::move(function_identifier_0_)),
     left_paren_1(std::move(left_paren_1_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // function_call_header_function_identifier_left_paren_t

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> function_call_header_t::pattern<0>::list = {
  pattern_item_t<function_identifier_t>::get(),
  pattern_item_t<token_t>::get(token_t::uppercase_to_kind("LEFT_PAREN"))
};

}   // ast

}   // gliss
