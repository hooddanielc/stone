#pragma once


/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */
  

#include <vector>
#include "../ast.h"
#include "function-identifier.h"

namespace gliss {

namespace ast {

class function_call_header_t: public ast_t {

public:

  using unique_pattern_t = std::shared_ptr<any_pattern_item_t>;

  using pattern_t = std::vector<unique_pattern_t>;

  static const std::vector<pattern_t> patterns;

  function_call_header_t(
    const function_identifier_t &,
    const token_t &
  );

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // function_call_header_t

const std::vector<function_call_header_t::pattern_t> function_call_header_t::patterns = {
  {
    pattern_item_t<function_identifier_t>::get(),
    pattern_item_t<token_t>::get(token_t::uppercase_to_kind("LEFT_PAREN"))
  }
};

}   // ast

}   // gliss
