#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"

namespace gliss {

namespace ast {

class precise_qualifier_t: public ast_t {

public:

  static constexpr int num_types = 1;

  template <int n, typename = void>
  struct pattern;

  template<int n>
  struct pattern<n, typename std::enable_if<n == 0>::type> {
    using type = precise_qualifier_precise_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  virtual ~precise_qualifier_t() = default;

};  // precise_qualifier_t

class precise_qualifier_precise_t: public precise_qualifier_t {

public:

  std::unique_ptr<token_t> precise_0;

  precise_qualifier_precise_t(
    std::unique_ptr<token_t> &&precise_0_
  ): precise_0(std::move(precise_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // precise_qualifier_precise_t

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> precise_qualifier_t::pattern<0>::list = {
  pattern_item_t<token_t>::get(token_t::uppercase_to_kind("PRECISE"))
};

}   // ast

}   // gliss
