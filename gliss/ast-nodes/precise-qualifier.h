#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"

/**
 * Patterns for precise_qualifier
 *
 * 1. PRECISE
 */

namespace gliss {

namespace ast {

class precise_qualifier_t: public ast_t {

public:

  static constexpr int rules = 1;

  static constexpr int id = 258;

  virtual ~precise_qualifier_t() = default;

};  // precise_qualifier_t

class precise_qualifier_precise_t: public precise_qualifier_t {

public:

  std::shared_ptr<ast_token_t> precise_0;

  precise_qualifier_precise_t(
    std::shared_ptr<ast_token_t> precise_0_
  ): precise_0(precise_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 258;
  }

  static std::shared_ptr<precise_qualifier_precise_t> make(
    std::shared_ptr<ast_token_t> PRECISE_0_
  ) {
    return std::make_shared<precise_qualifier_precise_t>(
      PRECISE_0_
    );
  }

};  // precise_qualifier_precise_t

}   // ast

}   // gliss
