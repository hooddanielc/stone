#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"

/**
 * Patterns for identifier_list
 *
 * 1. COMMA IDENTIFIER
 * 2. identifier_list COMMA IDENTIFIER
 */

namespace gliss {

namespace ast {

class identifier_list_t: public ast_t {

public:

  static constexpr int rules = 2;

  static constexpr int id = 242;

  virtual ~identifier_list_t() = default;

};  // identifier_list_t

class identifier_list_comma_identifier_t: public identifier_list_t {

public:

  std::shared_ptr<ast_token_t> comma_0;

  std::shared_ptr<ast_token_t> identifier_1;

  identifier_list_comma_identifier_t(
    std::shared_ptr<ast_token_t> comma_0_,
    std::shared_ptr<ast_token_t> identifier_1_
  ): comma_0(comma_0_),
     identifier_1(identifier_1_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 242;
  }

  static std::shared_ptr<identifier_list_comma_identifier_t> make(
    std::shared_ptr<ast_token_t> COMMA_0_,
    std::shared_ptr<ast_token_t> IDENTIFIER_1_
  ) {
    return std::make_shared<identifier_list_comma_identifier_t>(
      COMMA_0_,
      IDENTIFIER_1_
    );
  }

};  // identifier_list_comma_identifier_t

class identifier_list_identifier_list_comma_identifier_t: public identifier_list_t {

public:

  std::shared_ptr<identifier_list_t> identifier_list_0;

  std::shared_ptr<ast_token_t> comma_1;

  std::shared_ptr<ast_token_t> identifier_2;

  identifier_list_identifier_list_comma_identifier_t(
    std::shared_ptr<identifier_list_t> identifier_list_0_,
    std::shared_ptr<ast_token_t> comma_1_,
    std::shared_ptr<ast_token_t> identifier_2_
  ): identifier_list_0(identifier_list_0_),
     comma_1(comma_1_),
     identifier_2(identifier_2_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 242;
  }

  static std::shared_ptr<identifier_list_identifier_list_comma_identifier_t> make(
    std::shared_ptr<identifier_list_t> identifier_list_0_,
    std::shared_ptr<ast_token_t> COMMA_1_,
    std::shared_ptr<ast_token_t> IDENTIFIER_2_
  ) {
    return std::make_shared<identifier_list_identifier_list_comma_identifier_t>(
      identifier_list_0_,
      COMMA_1_,
      IDENTIFIER_2_
    );
  }

};  // identifier_list_identifier_list_comma_identifier_t

}   // ast

}   // gliss
