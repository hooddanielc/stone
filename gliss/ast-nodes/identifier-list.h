#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"

/**
 * Patterns for identifier_list
 *
 * 1. COMMA IDENTIFIER
 * 2. identifier_list COMMA IDENTIFIER
 */

namespace gliss {

namespace ast {

class identifier_list_t: public ast_t {

public:

  static constexpr int num_types = 2;

  virtual ~identifier_list_t() = default;

};  // identifier_list_t

class identifier_list_comma_identifier_t: public identifier_list_t {

public:

  std::unique_ptr<token_t> comma_0;

  std::unique_ptr<token_t> identifier_1;

  identifier_list_comma_identifier_t(
    std::unique_ptr<token_t> &&comma_0_,
    std::unique_ptr<token_t> &&identifier_1_
  ): comma_0(std::move(comma_0_)),
     identifier_1(std::move(identifier_1_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<identifier_list_comma_identifier_t> make(
    const token_t *COMMA_0_,
    const token_t *IDENTIFIER_1_
  ) {
    return std::make_unique<identifier_list_comma_identifier_t>(
      std::make_unique<token_t>(*COMMA_0_),
      std::make_unique<token_t>(*IDENTIFIER_1_)
    );
  }

};  // identifier_list_comma_identifier_t

class identifier_list_identifier_list_comma_identifier_t: public identifier_list_t {

public:

  std::unique_ptr<identifier_list_t> identifier_list_0;

  std::unique_ptr<token_t> comma_1;

  std::unique_ptr<token_t> identifier_2;

  identifier_list_identifier_list_comma_identifier_t(
    std::unique_ptr<identifier_list_t> &&identifier_list_0_,
    std::unique_ptr<token_t> &&comma_1_,
    std::unique_ptr<token_t> &&identifier_2_
  ): identifier_list_0(std::move(identifier_list_0_)),
     comma_1(std::move(comma_1_)),
     identifier_2(std::move(identifier_2_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<identifier_list_identifier_list_comma_identifier_t> make(
    std::unique_ptr<identifier_list_t> &&identifier_list_0_,
    const token_t *COMMA_1_,
    const token_t *IDENTIFIER_2_
  ) {
    return std::make_unique<identifier_list_identifier_list_comma_identifier_t>(
      std::move(identifier_list_0_),
      std::make_unique<token_t>(*COMMA_1_),
      std::make_unique<token_t>(*IDENTIFIER_2_)
    );
  }

};  // identifier_list_identifier_list_comma_identifier_t

}   // ast

}   // gliss
