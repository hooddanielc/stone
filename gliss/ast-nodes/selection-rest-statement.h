#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "statement.h"

/**
 * Patterns for selection_rest_statement
 *
 * 1. statement ELSE statement
 * 2. statement
 */

namespace gliss {

namespace ast {

class statement_t;

class selection_rest_statement_t: public ast_t {

public:

  static constexpr int rules = 2;

  static constexpr int id = 282;

  virtual ~selection_rest_statement_t() = default;

};  // selection_rest_statement_t

class selection_rest_statement_statement_else_statement_t: public selection_rest_statement_t {

public:

  std::unique_ptr<statement_t> statement_0;

  std::unique_ptr<token_t> else_1;

  std::unique_ptr<statement_t> statement_2;

  selection_rest_statement_statement_else_statement_t(
    std::unique_ptr<statement_t> &&statement_0_,
    std::unique_ptr<token_t> &&else_1_,
    std::unique_ptr<statement_t> &&statement_2_
  ): statement_0(std::move(statement_0_)),
     else_1(std::move(else_1_)),
     statement_2(std::move(statement_2_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<selection_rest_statement_statement_else_statement_t> make(
    std::unique_ptr<statement_t> &&statement_0_,
    const token_t *ELSE_1_,
    std::unique_ptr<statement_t> &&statement_2_
  ) {
    return std::make_unique<selection_rest_statement_statement_else_statement_t>(
      std::move(statement_0_),
      std::make_unique<token_t>(*ELSE_1_),
      std::move(statement_2_)
    );
  }

};  // selection_rest_statement_statement_else_statement_t

class selection_rest_statement_statement_t: public selection_rest_statement_t {

public:

  std::unique_ptr<statement_t> statement_0;

  selection_rest_statement_statement_t(
    std::unique_ptr<statement_t> &&statement_0_
  ): statement_0(std::move(statement_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<selection_rest_statement_statement_t> make(
    std::unique_ptr<statement_t> &&statement_0_
  ) {
    return std::make_unique<selection_rest_statement_statement_t>(
      std::move(statement_0_)
    );
  }

};  // selection_rest_statement_statement_t

}   // ast

}   // gliss
