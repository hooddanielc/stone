#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "statement.h"

/**
 * Patterns for selection_rest_statement
 *
 * 1. statement ELSE statement
 * 2. statement
 */

namespace gliss {

namespace ast {

class statement_t;

class selection_rest_statement_t: public ast_t {

public:

  static constexpr int rules = 2;

  static constexpr int id = 283;

  virtual ~selection_rest_statement_t() = default;

};  // selection_rest_statement_t

class selection_rest_statement_statement_else_statement_t: public selection_rest_statement_t {

public:

  std::shared_ptr<statement_t> statement_0;

  std::shared_ptr<ast_token_t> else_1;

  std::shared_ptr<statement_t> statement_2;

  selection_rest_statement_statement_else_statement_t(
    std::shared_ptr<statement_t> statement_0_,
    std::shared_ptr<ast_token_t> else_1_,
    std::shared_ptr<statement_t> statement_2_
  ): statement_0(statement_0_),
     else_1(else_1_),
     statement_2(statement_2_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 283;
  }

  static std::shared_ptr<selection_rest_statement_statement_else_statement_t> make(
    std::shared_ptr<statement_t> statement_0_,
    std::shared_ptr<ast_token_t> ELSE_1_,
    std::shared_ptr<statement_t> statement_2_
  ) {
    return std::make_shared<selection_rest_statement_statement_else_statement_t>(
      statement_0_,
      ELSE_1_,
      statement_2_
    );
  }

};  // selection_rest_statement_statement_else_statement_t

class selection_rest_statement_statement_t: public selection_rest_statement_t {

public:

  std::shared_ptr<statement_t> statement_0;

  selection_rest_statement_statement_t(
    std::shared_ptr<statement_t> statement_0_
  ): statement_0(statement_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 283;
  }

  static std::shared_ptr<selection_rest_statement_statement_t> make(
    std::shared_ptr<statement_t> statement_0_
  ) {
    return std::make_shared<selection_rest_statement_statement_t>(
      statement_0_
    );
  }

};  // selection_rest_statement_statement_t

}   // ast

}   // gliss
