#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "unary-expression.h"

/**
 * Patterns for multiplicative_expression
 *
 * 1. unary_expression
 * 2. multiplicative_expression STAR unary_expression
 * 3. multiplicative_expression SLASH unary_expression
 * 4. multiplicative_expression PERCENT unary_expression
 */

namespace gliss {

namespace ast {

class unary_expression_t;

class multiplicative_expression_t: public ast_t {

public:

  static constexpr int rules = 4;

  static constexpr int id = 225;

  virtual ~multiplicative_expression_t() = default;

};  // multiplicative_expression_t

class multiplicative_expression_unary_expression_t: public multiplicative_expression_t {

public:

  std::shared_ptr<unary_expression_t> unary_expression_0;

  multiplicative_expression_unary_expression_t(
    std::shared_ptr<unary_expression_t> unary_expression_0_
  ): unary_expression_0(unary_expression_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 225;
  }

  static std::shared_ptr<multiplicative_expression_unary_expression_t> make(
    std::shared_ptr<unary_expression_t> unary_expression_0_
  ) {
    return std::make_shared<multiplicative_expression_unary_expression_t>(
      unary_expression_0_
    );
  }

};  // multiplicative_expression_unary_expression_t

class multiplicative_expression_multiplicative_expression_star_unary_expression_t: public multiplicative_expression_t {

public:

  std::shared_ptr<multiplicative_expression_t> multiplicative_expression_0;

  std::shared_ptr<ast_token_t> star_1;

  std::shared_ptr<unary_expression_t> unary_expression_2;

  multiplicative_expression_multiplicative_expression_star_unary_expression_t(
    std::shared_ptr<multiplicative_expression_t> multiplicative_expression_0_,
    std::shared_ptr<ast_token_t> star_1_,
    std::shared_ptr<unary_expression_t> unary_expression_2_
  ): multiplicative_expression_0(multiplicative_expression_0_),
     star_1(star_1_),
     unary_expression_2(unary_expression_2_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 225;
  }

  static std::shared_ptr<multiplicative_expression_multiplicative_expression_star_unary_expression_t> make(
    std::shared_ptr<multiplicative_expression_t> multiplicative_expression_0_,
    std::shared_ptr<ast_token_t> STAR_1_,
    std::shared_ptr<unary_expression_t> unary_expression_2_
  ) {
    return std::make_shared<multiplicative_expression_multiplicative_expression_star_unary_expression_t>(
      multiplicative_expression_0_,
      STAR_1_,
      unary_expression_2_
    );
  }

};  // multiplicative_expression_multiplicative_expression_star_unary_expression_t

class multiplicative_expression_multiplicative_expression_slash_unary_expression_t: public multiplicative_expression_t {

public:

  std::shared_ptr<multiplicative_expression_t> multiplicative_expression_0;

  std::shared_ptr<ast_token_t> slash_1;

  std::shared_ptr<unary_expression_t> unary_expression_2;

  multiplicative_expression_multiplicative_expression_slash_unary_expression_t(
    std::shared_ptr<multiplicative_expression_t> multiplicative_expression_0_,
    std::shared_ptr<ast_token_t> slash_1_,
    std::shared_ptr<unary_expression_t> unary_expression_2_
  ): multiplicative_expression_0(multiplicative_expression_0_),
     slash_1(slash_1_),
     unary_expression_2(unary_expression_2_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 225;
  }

  static std::shared_ptr<multiplicative_expression_multiplicative_expression_slash_unary_expression_t> make(
    std::shared_ptr<multiplicative_expression_t> multiplicative_expression_0_,
    std::shared_ptr<ast_token_t> SLASH_1_,
    std::shared_ptr<unary_expression_t> unary_expression_2_
  ) {
    return std::make_shared<multiplicative_expression_multiplicative_expression_slash_unary_expression_t>(
      multiplicative_expression_0_,
      SLASH_1_,
      unary_expression_2_
    );
  }

};  // multiplicative_expression_multiplicative_expression_slash_unary_expression_t

class multiplicative_expression_multiplicative_expression_percent_unary_expression_t: public multiplicative_expression_t {

public:

  std::shared_ptr<multiplicative_expression_t> multiplicative_expression_0;

  std::shared_ptr<ast_token_t> percent_1;

  std::shared_ptr<unary_expression_t> unary_expression_2;

  multiplicative_expression_multiplicative_expression_percent_unary_expression_t(
    std::shared_ptr<multiplicative_expression_t> multiplicative_expression_0_,
    std::shared_ptr<ast_token_t> percent_1_,
    std::shared_ptr<unary_expression_t> unary_expression_2_
  ): multiplicative_expression_0(multiplicative_expression_0_),
     percent_1(percent_1_),
     unary_expression_2(unary_expression_2_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 225;
  }

  static std::shared_ptr<multiplicative_expression_multiplicative_expression_percent_unary_expression_t> make(
    std::shared_ptr<multiplicative_expression_t> multiplicative_expression_0_,
    std::shared_ptr<ast_token_t> PERCENT_1_,
    std::shared_ptr<unary_expression_t> unary_expression_2_
  ) {
    return std::make_shared<multiplicative_expression_multiplicative_expression_percent_unary_expression_t>(
      multiplicative_expression_0_,
      PERCENT_1_,
      unary_expression_2_
    );
  }

};  // multiplicative_expression_multiplicative_expression_percent_unary_expression_t

}   // ast

}   // gliss
