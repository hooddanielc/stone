#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "type-specifier.h"
#include "array-specifier.h"

/**
 * Patterns for parameter_declarator
 *
 * 1. type_specifier IDENTIFIER
 * 2. type_specifier IDENTIFIER array_specifier
 */

namespace gliss {

namespace ast {

class type_specifier_t;
class array_specifier_t;

class parameter_declarator_t: public ast_t {

public:

  static constexpr int rules = 2;

  static constexpr int id = 246;

  virtual ~parameter_declarator_t() = default;

};  // parameter_declarator_t

class parameter_declarator_type_specifier_identifier_t: public parameter_declarator_t {

public:

  std::unique_ptr<type_specifier_t> type_specifier_0;

  std::unique_ptr<token_t> identifier_1;

  parameter_declarator_type_specifier_identifier_t(
    std::unique_ptr<type_specifier_t> &&type_specifier_0_,
    std::unique_ptr<token_t> &&identifier_1_
  ): type_specifier_0(std::move(type_specifier_0_)),
     identifier_1(std::move(identifier_1_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<parameter_declarator_type_specifier_identifier_t> make(
    std::unique_ptr<type_specifier_t> &&type_specifier_0_,
    const token_t *IDENTIFIER_1_
  ) {
    return std::make_unique<parameter_declarator_type_specifier_identifier_t>(
      std::move(type_specifier_0_),
      std::make_unique<token_t>(*IDENTIFIER_1_)
    );
  }

};  // parameter_declarator_type_specifier_identifier_t

class parameter_declarator_type_specifier_identifier_array_specifier_t: public parameter_declarator_t {

public:

  std::unique_ptr<type_specifier_t> type_specifier_0;

  std::unique_ptr<token_t> identifier_1;

  std::unique_ptr<array_specifier_t> array_specifier_2;

  parameter_declarator_type_specifier_identifier_array_specifier_t(
    std::unique_ptr<type_specifier_t> &&type_specifier_0_,
    std::unique_ptr<token_t> &&identifier_1_,
    std::unique_ptr<array_specifier_t> &&array_specifier_2_
  ): type_specifier_0(std::move(type_specifier_0_)),
     identifier_1(std::move(identifier_1_)),
     array_specifier_2(std::move(array_specifier_2_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<parameter_declarator_type_specifier_identifier_array_specifier_t> make(
    std::unique_ptr<type_specifier_t> &&type_specifier_0_,
    const token_t *IDENTIFIER_1_,
    std::unique_ptr<array_specifier_t> &&array_specifier_2_
  ) {
    return std::make_unique<parameter_declarator_type_specifier_identifier_array_specifier_t>(
      std::move(type_specifier_0_),
      std::make_unique<token_t>(*IDENTIFIER_1_),
      std::move(array_specifier_2_)
    );
  }

};  // parameter_declarator_type_specifier_identifier_array_specifier_t

}   // ast

}   // gliss
