#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "type-specifier.h"
#include "array-specifier.h"

/**
 * Patterns for parameter_declarator
 *
 * 1. type_specifier IDENTIFIER
 * 2. type_specifier IDENTIFIER array_specifier
 */

namespace gliss {

namespace ast {

class type_specifier_t;
class array_specifier_t;

class parameter_declarator_t: public ast_t {

public:

  static constexpr int rules = 2;

  static constexpr int id = 247;

  virtual ~parameter_declarator_t() = default;

};  // parameter_declarator_t

class parameter_declarator_type_specifier_identifier_t: public parameter_declarator_t {

public:

  std::shared_ptr<type_specifier_t> type_specifier_0;

  std::shared_ptr<ast_token_t> identifier_1;

  parameter_declarator_type_specifier_identifier_t(
    std::shared_ptr<type_specifier_t> type_specifier_0_,
    std::shared_ptr<ast_token_t> identifier_1_
  ): type_specifier_0(type_specifier_0_),
     identifier_1(identifier_1_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 247;
  }

  static std::shared_ptr<parameter_declarator_type_specifier_identifier_t> make(
    std::shared_ptr<type_specifier_t> type_specifier_0_,
    std::shared_ptr<ast_token_t> IDENTIFIER_1_
  ) {
    return std::make_shared<parameter_declarator_type_specifier_identifier_t>(
      type_specifier_0_,
      IDENTIFIER_1_
    );
  }

};  // parameter_declarator_type_specifier_identifier_t

class parameter_declarator_type_specifier_identifier_array_specifier_t: public parameter_declarator_t {

public:

  std::shared_ptr<type_specifier_t> type_specifier_0;

  std::shared_ptr<ast_token_t> identifier_1;

  std::shared_ptr<array_specifier_t> array_specifier_2;

  parameter_declarator_type_specifier_identifier_array_specifier_t(
    std::shared_ptr<type_specifier_t> type_specifier_0_,
    std::shared_ptr<ast_token_t> identifier_1_,
    std::shared_ptr<array_specifier_t> array_specifier_2_
  ): type_specifier_0(type_specifier_0_),
     identifier_1(identifier_1_),
     array_specifier_2(array_specifier_2_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 247;
  }

  static std::shared_ptr<parameter_declarator_type_specifier_identifier_array_specifier_t> make(
    std::shared_ptr<type_specifier_t> type_specifier_0_,
    std::shared_ptr<ast_token_t> IDENTIFIER_1_,
    std::shared_ptr<array_specifier_t> array_specifier_2_
  ) {
    return std::make_shared<parameter_declarator_type_specifier_identifier_array_specifier_t>(
      type_specifier_0_,
      IDENTIFIER_1_,
      array_specifier_2_
    );
  }

};  // parameter_declarator_type_specifier_identifier_array_specifier_t

}   // ast

}   // gliss
