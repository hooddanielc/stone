#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "inclusive-or-expression.h"

/**
 * Patterns for logical_and_expression
 *
 * 1. inclusive_or_expression
 * 2. logical_and_expression AND_OP inclusive_or_expression
 */

namespace gliss {

namespace ast {

class inclusive_or_expression_t;

class logical_and_expression_t: public ast_t {

public:

  static constexpr int rules = 2;

  static constexpr int id = 233;

  virtual ~logical_and_expression_t() = default;

};  // logical_and_expression_t

class logical_and_expression_inclusive_or_expression_t: public logical_and_expression_t {

public:

  std::shared_ptr<inclusive_or_expression_t> inclusive_or_expression_0;

  logical_and_expression_inclusive_or_expression_t(
    std::shared_ptr<inclusive_or_expression_t> inclusive_or_expression_0_
  ): inclusive_or_expression_0(inclusive_or_expression_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 233;
  }

  static std::shared_ptr<logical_and_expression_inclusive_or_expression_t> make(
    std::shared_ptr<inclusive_or_expression_t> inclusive_or_expression_0_
  ) {
    return std::make_shared<logical_and_expression_inclusive_or_expression_t>(
      inclusive_or_expression_0_
    );
  }

};  // logical_and_expression_inclusive_or_expression_t

class logical_and_expression_logical_and_expression_and_op_inclusive_or_expression_t: public logical_and_expression_t {

public:

  std::shared_ptr<logical_and_expression_t> logical_and_expression_0;

  std::shared_ptr<ast_token_t> and_op_1;

  std::shared_ptr<inclusive_or_expression_t> inclusive_or_expression_2;

  logical_and_expression_logical_and_expression_and_op_inclusive_or_expression_t(
    std::shared_ptr<logical_and_expression_t> logical_and_expression_0_,
    std::shared_ptr<ast_token_t> and_op_1_,
    std::shared_ptr<inclusive_or_expression_t> inclusive_or_expression_2_
  ): logical_and_expression_0(logical_and_expression_0_),
     and_op_1(and_op_1_),
     inclusive_or_expression_2(inclusive_or_expression_2_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 233;
  }

  static std::shared_ptr<logical_and_expression_logical_and_expression_and_op_inclusive_or_expression_t> make(
    std::shared_ptr<logical_and_expression_t> logical_and_expression_0_,
    std::shared_ptr<ast_token_t> AND_OP_1_,
    std::shared_ptr<inclusive_or_expression_t> inclusive_or_expression_2_
  ) {
    return std::make_shared<logical_and_expression_logical_and_expression_and_op_inclusive_or_expression_t>(
      logical_and_expression_0_,
      AND_OP_1_,
      inclusive_or_expression_2_
    );
  }

};  // logical_and_expression_logical_and_expression_and_op_inclusive_or_expression_t

}   // ast

}   // gliss
