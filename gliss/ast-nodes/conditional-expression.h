#pragma once


/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */
  

#include <vector>
#include "../ast.h"
#include "logical-or-expression.h"
#include "conditional-ternary-expression.h"

namespace gliss {

namespace ast {

class conditional_expression_t: public ast_t {

public:

  static const std::vector<std::vector<any_pattern_item_t>> patterns;

  conditional_expression_t(
    const logical_or_expression_t &
  );

  conditional_expression_t(
    const conditional_ternary_expression_t &
  );

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // conditional_expression_t

const std::vector<std::vector<any_pattern_item_t>> conditional_expression_t::patterns = {
  {
    pattern_item_t<logical_or_expression_t>::get()
  }, {
    pattern_item_t<conditional_ternary_expression_t>::get()
  }
};

}   // ast

}   // gliss
