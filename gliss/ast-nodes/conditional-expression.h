#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "logical-or-expression.h"
#include "expression.h"
#include "assignment-expression.h"

/**
 * Patterns for conditional_expression
 *
 * 1. logical_or_expression
 * 2. logical_or_expression QUESTION expression COLON assignment_expression
 */

namespace gliss {

namespace ast {

class logical_or_expression_t;
class expression_t;
class assignment_expression_t;

class conditional_expression_t: public ast_t {

public:

  static constexpr int rules = 2;

  static constexpr int id = 236;

  virtual ~conditional_expression_t() = default;

};  // conditional_expression_t

class conditional_expression_logical_or_expression_t: public conditional_expression_t {

public:

  std::shared_ptr<logical_or_expression_t> logical_or_expression_0;

  conditional_expression_logical_or_expression_t(
    std::shared_ptr<logical_or_expression_t> logical_or_expression_0_
  ): logical_or_expression_0(logical_or_expression_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 236;
  }

  static std::shared_ptr<conditional_expression_logical_or_expression_t> make(
    std::shared_ptr<logical_or_expression_t> logical_or_expression_0_
  ) {
    return std::make_shared<conditional_expression_logical_or_expression_t>(
      logical_or_expression_0_
    );
  }

};  // conditional_expression_logical_or_expression_t

class conditional_expression_logical_or_expression_question_expression_colon_assignment_expression_t: public conditional_expression_t {

public:

  std::shared_ptr<logical_or_expression_t> logical_or_expression_0;

  std::shared_ptr<ast_token_t> question_1;

  std::shared_ptr<expression_t> expression_2;

  std::shared_ptr<ast_token_t> colon_3;

  std::shared_ptr<assignment_expression_t> assignment_expression_4;

  conditional_expression_logical_or_expression_question_expression_colon_assignment_expression_t(
    std::shared_ptr<logical_or_expression_t> logical_or_expression_0_,
    std::shared_ptr<ast_token_t> question_1_,
    std::shared_ptr<expression_t> expression_2_,
    std::shared_ptr<ast_token_t> colon_3_,
    std::shared_ptr<assignment_expression_t> assignment_expression_4_
  ): logical_or_expression_0(logical_or_expression_0_),
     question_1(question_1_),
     expression_2(expression_2_),
     colon_3(colon_3_),
     assignment_expression_4(assignment_expression_4_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 236;
  }

  static std::shared_ptr<conditional_expression_logical_or_expression_question_expression_colon_assignment_expression_t> make(
    std::shared_ptr<logical_or_expression_t> logical_or_expression_0_,
    std::shared_ptr<ast_token_t> QUESTION_1_,
    std::shared_ptr<expression_t> expression_2_,
    std::shared_ptr<ast_token_t> COLON_3_,
    std::shared_ptr<assignment_expression_t> assignment_expression_4_
  ) {
    return std::make_shared<conditional_expression_logical_or_expression_question_expression_colon_assignment_expression_t>(
      logical_or_expression_0_,
      QUESTION_1_,
      expression_2_,
      COLON_3_,
      assignment_expression_4_
    );
  }

};  // conditional_expression_logical_or_expression_question_expression_colon_assignment_expression_t

}   // ast

}   // gliss
