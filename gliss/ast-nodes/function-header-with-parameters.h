#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "function-header.h"
#include "parameter-declaration.h"

/**
 * Patterns for function_header_with_parameters
 *
 * 1. function_header parameter_declaration
 * 2. function_header_with_parameters COMMA parameter_declaration
 */

namespace gliss {

namespace ast {

class function_header_t;
class parameter_declaration_t;

class function_header_with_parameters_t: public ast_t {

public:

  static constexpr int rules = 2;

  static constexpr int id = 245;

  virtual ~function_header_with_parameters_t() = default;

};  // function_header_with_parameters_t

class function_header_with_parameters_function_header_parameter_declaration_t: public function_header_with_parameters_t {

public:

  std::shared_ptr<function_header_t> function_header_0;

  std::shared_ptr<parameter_declaration_t> parameter_declaration_1;

  function_header_with_parameters_function_header_parameter_declaration_t(
    std::shared_ptr<function_header_t> function_header_0_,
    std::shared_ptr<parameter_declaration_t> parameter_declaration_1_
  ): function_header_0(function_header_0_),
     parameter_declaration_1(parameter_declaration_1_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 245;
  }

  static std::shared_ptr<function_header_with_parameters_function_header_parameter_declaration_t> make(
    std::shared_ptr<function_header_t> function_header_0_,
    std::shared_ptr<parameter_declaration_t> parameter_declaration_1_
  ) {
    return std::make_shared<function_header_with_parameters_function_header_parameter_declaration_t>(
      function_header_0_,
      parameter_declaration_1_
    );
  }

};  // function_header_with_parameters_function_header_parameter_declaration_t

class function_header_with_parameters_function_header_with_parameters_comma_parameter_declaration_t: public function_header_with_parameters_t {

public:

  std::shared_ptr<function_header_with_parameters_t> function_header_with_parameters_0;

  std::shared_ptr<ast_token_t> comma_1;

  std::shared_ptr<parameter_declaration_t> parameter_declaration_2;

  function_header_with_parameters_function_header_with_parameters_comma_parameter_declaration_t(
    std::shared_ptr<function_header_with_parameters_t> function_header_with_parameters_0_,
    std::shared_ptr<ast_token_t> comma_1_,
    std::shared_ptr<parameter_declaration_t> parameter_declaration_2_
  ): function_header_with_parameters_0(function_header_with_parameters_0_),
     comma_1(comma_1_),
     parameter_declaration_2(parameter_declaration_2_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 245;
  }

  static std::shared_ptr<function_header_with_parameters_function_header_with_parameters_comma_parameter_declaration_t> make(
    std::shared_ptr<function_header_with_parameters_t> function_header_with_parameters_0_,
    std::shared_ptr<ast_token_t> COMMA_1_,
    std::shared_ptr<parameter_declaration_t> parameter_declaration_2_
  ) {
    return std::make_shared<function_header_with_parameters_function_header_with_parameters_comma_parameter_declaration_t>(
      function_header_with_parameters_0_,
      COMMA_1_,
      parameter_declaration_2_
    );
  }

};  // function_header_with_parameters_function_header_with_parameters_comma_parameter_declaration_t

}   // ast

}   // gliss
