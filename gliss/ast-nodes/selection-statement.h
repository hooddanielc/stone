#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "expression.h"
#include "selection-rest-statement.h"

/**
 * Patterns for selection_statement
 *
 * 1. IF LEFT_PAREN expression RIGHT_PAREN selection_rest_statement
 */

namespace gliss {

namespace ast {

class expression_t;
class selection_rest_statement_t;

class selection_statement_t: public ast_t {

public:

  static constexpr int num_types = 1;

  virtual ~selection_statement_t() = default;

};  // selection_statement_t

class selection_statement_if_left_paren_expression_right_paren_selection_rest_statement_t: public selection_statement_t {

public:

  std::unique_ptr<token_t> if_0;

  std::unique_ptr<token_t> left_paren_1;

  std::unique_ptr<expression_t> expression_2;

  std::unique_ptr<token_t> right_paren_3;

  std::unique_ptr<selection_rest_statement_t> selection_rest_statement_4;

  selection_statement_if_left_paren_expression_right_paren_selection_rest_statement_t(
    std::unique_ptr<token_t> &&if_0_,
    std::unique_ptr<token_t> &&left_paren_1_,
    std::unique_ptr<expression_t> &&expression_2_,
    std::unique_ptr<token_t> &&right_paren_3_,
    std::unique_ptr<selection_rest_statement_t> &&selection_rest_statement_4_
  ): if_0(std::move(if_0_)),
     left_paren_1(std::move(left_paren_1_)),
     expression_2(std::move(expression_2_)),
     right_paren_3(std::move(right_paren_3_)),
     selection_rest_statement_4(std::move(selection_rest_statement_4_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<selection_statement_if_left_paren_expression_right_paren_selection_rest_statement_t> make(
    const token_t *IF_0_,
    const token_t *LEFT_PAREN_1_,
    std::unique_ptr<expression_t> &&expression_2_,
    const token_t *RIGHT_PAREN_3_,
    std::unique_ptr<selection_rest_statement_t> &&selection_rest_statement_4_
  ) {
    return std::make_unique<selection_statement_if_left_paren_expression_right_paren_selection_rest_statement_t>(
      std::make_unique<token_t>(*IF_0_),
      std::make_unique<token_t>(*LEFT_PAREN_1_),
      std::move(expression_2_),
      std::make_unique<token_t>(*RIGHT_PAREN_3_),
      std::move(selection_rest_statement_4_)
    );
  }

};  // selection_statement_if_left_paren_expression_right_paren_selection_rest_statement_t

}   // ast

}   // gliss
