#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "expression.h"
#include "selection-rest-statement.h"

/**
 * Patterns for selection_statement
 *
 * 1. IF LEFT_PAREN expression RIGHT_PAREN selection_rest_statement
 */

namespace gliss {

namespace ast {

class expression_t;
class selection_rest_statement_t;

class selection_statement_t: public ast_t {

public:

  static constexpr int rules = 1;

  static constexpr int id = 282;

  virtual ~selection_statement_t() = default;

};  // selection_statement_t

class selection_statement_if_left_paren_expression_right_paren_selection_rest_statement_t: public selection_statement_t {

public:

  std::shared_ptr<ast_token_t> if_0;

  std::shared_ptr<ast_token_t> left_paren_1;

  std::shared_ptr<expression_t> expression_2;

  std::shared_ptr<ast_token_t> right_paren_3;

  std::shared_ptr<selection_rest_statement_t> selection_rest_statement_4;

  selection_statement_if_left_paren_expression_right_paren_selection_rest_statement_t(
    std::shared_ptr<ast_token_t> if_0_,
    std::shared_ptr<ast_token_t> left_paren_1_,
    std::shared_ptr<expression_t> expression_2_,
    std::shared_ptr<ast_token_t> right_paren_3_,
    std::shared_ptr<selection_rest_statement_t> selection_rest_statement_4_
  ): if_0(if_0_),
     left_paren_1(left_paren_1_),
     expression_2(expression_2_),
     right_paren_3(right_paren_3_),
     selection_rest_statement_4(selection_rest_statement_4_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 282;
  }

  static std::shared_ptr<selection_statement_if_left_paren_expression_right_paren_selection_rest_statement_t> make(
    std::shared_ptr<ast_token_t> IF_0_,
    std::shared_ptr<ast_token_t> LEFT_PAREN_1_,
    std::shared_ptr<expression_t> expression_2_,
    std::shared_ptr<ast_token_t> RIGHT_PAREN_3_,
    std::shared_ptr<selection_rest_statement_t> selection_rest_statement_4_
  ) {
    return std::make_shared<selection_statement_if_left_paren_expression_right_paren_selection_rest_statement_t>(
      IF_0_,
      LEFT_PAREN_1_,
      expression_2_,
      RIGHT_PAREN_3_,
      selection_rest_statement_4_
    );
  }

};  // selection_statement_if_left_paren_expression_right_paren_selection_rest_statement_t

}   // ast

}   // gliss
