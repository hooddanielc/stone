#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "equality-expression.h"

/**
 * Patterns for and_expression
 *
 * 1. equality_expression
 * 2. and_expression AMPERSAND equality_expression
 */

namespace gliss {

namespace ast {

class equality_expression_t;

class and_expression_t: public ast_t {

public:

  static constexpr int rules = 2;

  static constexpr int id = 229;

  virtual ~and_expression_t() = default;

};  // and_expression_t

class and_expression_equality_expression_t: public and_expression_t {

public:

  std::unique_ptr<equality_expression_t> equality_expression_0;

  and_expression_equality_expression_t(
    std::unique_ptr<equality_expression_t> &&equality_expression_0_
  ): equality_expression_0(std::move(equality_expression_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<and_expression_equality_expression_t> make(
    std::unique_ptr<equality_expression_t> &&equality_expression_0_
  ) {
    return std::make_unique<and_expression_equality_expression_t>(
      std::move(equality_expression_0_)
    );
  }

};  // and_expression_equality_expression_t

class and_expression_and_expression_ampersand_equality_expression_t: public and_expression_t {

public:

  std::unique_ptr<and_expression_t> and_expression_0;

  std::unique_ptr<token_t> ampersand_1;

  std::unique_ptr<equality_expression_t> equality_expression_2;

  and_expression_and_expression_ampersand_equality_expression_t(
    std::unique_ptr<and_expression_t> &&and_expression_0_,
    std::unique_ptr<token_t> &&ampersand_1_,
    std::unique_ptr<equality_expression_t> &&equality_expression_2_
  ): and_expression_0(std::move(and_expression_0_)),
     ampersand_1(std::move(ampersand_1_)),
     equality_expression_2(std::move(equality_expression_2_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<and_expression_and_expression_ampersand_equality_expression_t> make(
    std::unique_ptr<and_expression_t> &&and_expression_0_,
    const token_t *AMPERSAND_1_,
    std::unique_ptr<equality_expression_t> &&equality_expression_2_
  ) {
    return std::make_unique<and_expression_and_expression_ampersand_equality_expression_t>(
      std::move(and_expression_0_),
      std::make_unique<token_t>(*AMPERSAND_1_),
      std::move(equality_expression_2_)
    );
  }

};  // and_expression_and_expression_ampersand_equality_expression_t

}   // ast

}   // gliss
