#pragma once


/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */
  

#include <vector>
#include "../ast.h"
#include "function-prototype.h"
#include "compound-statement-no-new-scope.h"

namespace gliss {

namespace ast {

class function_prototype_t;
class compound_statement_no_new_scope_t;

class function_definition_t: public ast_t {

public:

  static constexpr int num_types = 1;

  template <int n, typename = void>
  struct pattern;

  template<int n>
  struct pattern<n, typename std::enable_if<n == 0>::type> {
    using type = function_definition_function_prototype_compound_statement_no_new_scope_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  virtual ~function_definition_t() = default;

};  // function_definition_t


class function_definition_function_prototype_compound_statement_no_new_scope_t: public function_definition_t {

public:

  std::unique_ptr<function_prototype_t> function_prototype_0;

  std::unique_ptr<compound_statement_no_new_scope_t> compound_statement_no_new_scope_1;

  function_definition_function_prototype_compound_statement_no_new_scope_t(
    std::unique_ptr<function_prototype_t> &&function_prototype_0_,
    std::unique_ptr<compound_statement_no_new_scope_t> &&compound_statement_no_new_scope_1_
  ): function_prototype_0(std::move(function_prototype_0_)),
     compound_statement_no_new_scope_1(std::move(compound_statement_no_new_scope_1_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // function_definition_function_prototype_compound_statement_no_new_scope_t
  

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> function_definition_t::pattern<0>::list = {
  pattern_item_t<function_prototype_t>::get(),
  pattern_item_t<compound_statement_no_new_scope_t>::get()
};

}   // ast

}   // gliss
