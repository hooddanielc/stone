#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "expression.h"

/**
 * Patterns for jump_statement
 *
 * 1. CONTINUE SEMICOLON
 * 2. BREAK SEMICOLON
 * 3. RETURN SEMICOLON
 * 4. RETURN expression SEMICOLON
 * 5. DISCARD SEMICOLON
 */

namespace gliss {

namespace ast {

class expression_t;

class jump_statement_t: public ast_t {

public:

  static constexpr int rules = 5;

  static constexpr int id = 292;

  virtual ~jump_statement_t() = default;

};  // jump_statement_t

class jump_statement_continue_semicolon_t: public jump_statement_t {

public:

  std::shared_ptr<ast_token_t> continue_0;

  std::shared_ptr<ast_token_t> semicolon_1;

  jump_statement_continue_semicolon_t(
    std::shared_ptr<ast_token_t> continue_0_,
    std::shared_ptr<ast_token_t> semicolon_1_
  ): continue_0(continue_0_),
     semicolon_1(semicolon_1_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 292;
  }

  static std::shared_ptr<jump_statement_continue_semicolon_t> make(
    std::shared_ptr<ast_token_t> CONTINUE_0_,
    std::shared_ptr<ast_token_t> SEMICOLON_1_
  ) {
    return std::make_shared<jump_statement_continue_semicolon_t>(
      CONTINUE_0_,
      SEMICOLON_1_
    );
  }

};  // jump_statement_continue_semicolon_t

class jump_statement_break_semicolon_t: public jump_statement_t {

public:

  std::shared_ptr<ast_token_t> break_0;

  std::shared_ptr<ast_token_t> semicolon_1;

  jump_statement_break_semicolon_t(
    std::shared_ptr<ast_token_t> break_0_,
    std::shared_ptr<ast_token_t> semicolon_1_
  ): break_0(break_0_),
     semicolon_1(semicolon_1_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 292;
  }

  static std::shared_ptr<jump_statement_break_semicolon_t> make(
    std::shared_ptr<ast_token_t> BREAK_0_,
    std::shared_ptr<ast_token_t> SEMICOLON_1_
  ) {
    return std::make_shared<jump_statement_break_semicolon_t>(
      BREAK_0_,
      SEMICOLON_1_
    );
  }

};  // jump_statement_break_semicolon_t

class jump_statement_return_semicolon_t: public jump_statement_t {

public:

  std::shared_ptr<ast_token_t> return_0;

  std::shared_ptr<ast_token_t> semicolon_1;

  jump_statement_return_semicolon_t(
    std::shared_ptr<ast_token_t> return_0_,
    std::shared_ptr<ast_token_t> semicolon_1_
  ): return_0(return_0_),
     semicolon_1(semicolon_1_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 292;
  }

  static std::shared_ptr<jump_statement_return_semicolon_t> make(
    std::shared_ptr<ast_token_t> RETURN_0_,
    std::shared_ptr<ast_token_t> SEMICOLON_1_
  ) {
    return std::make_shared<jump_statement_return_semicolon_t>(
      RETURN_0_,
      SEMICOLON_1_
    );
  }

};  // jump_statement_return_semicolon_t

class jump_statement_return_expression_semicolon_t: public jump_statement_t {

public:

  std::shared_ptr<ast_token_t> return_0;

  std::shared_ptr<expression_t> expression_1;

  std::shared_ptr<ast_token_t> semicolon_2;

  jump_statement_return_expression_semicolon_t(
    std::shared_ptr<ast_token_t> return_0_,
    std::shared_ptr<expression_t> expression_1_,
    std::shared_ptr<ast_token_t> semicolon_2_
  ): return_0(return_0_),
     expression_1(expression_1_),
     semicolon_2(semicolon_2_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 292;
  }

  static std::shared_ptr<jump_statement_return_expression_semicolon_t> make(
    std::shared_ptr<ast_token_t> RETURN_0_,
    std::shared_ptr<expression_t> expression_1_,
    std::shared_ptr<ast_token_t> SEMICOLON_2_
  ) {
    return std::make_shared<jump_statement_return_expression_semicolon_t>(
      RETURN_0_,
      expression_1_,
      SEMICOLON_2_
    );
  }

};  // jump_statement_return_expression_semicolon_t

class jump_statement_discard_semicolon_t: public jump_statement_t {

public:

  std::shared_ptr<ast_token_t> discard_0;

  std::shared_ptr<ast_token_t> semicolon_1;

  jump_statement_discard_semicolon_t(
    std::shared_ptr<ast_token_t> discard_0_,
    std::shared_ptr<ast_token_t> semicolon_1_
  ): discard_0(discard_0_),
     semicolon_1(semicolon_1_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 292;
  }

  static std::shared_ptr<jump_statement_discard_semicolon_t> make(
    std::shared_ptr<ast_token_t> DISCARD_0_,
    std::shared_ptr<ast_token_t> SEMICOLON_1_
  ) {
    return std::make_shared<jump_statement_discard_semicolon_t>(
      DISCARD_0_,
      SEMICOLON_1_
    );
  }

};  // jump_statement_discard_semicolon_t

}   // ast

}   // gliss
