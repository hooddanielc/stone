#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "expression.h"

/**
 * Patterns for jump_statement
 *
 * 1. CONTINUE SEMICOLON
 * 2. BREAK SEMICOLON
 * 3. RETURN SEMICOLON
 * 4. RETURN expression SEMICOLON
 * 5. DISCARD SEMICOLON
 */

namespace gliss {

namespace ast {

class expression_t;

class jump_statement_t: public ast_t {

public:

  static constexpr int num_types = 5;

  virtual ~jump_statement_t() = default;

};  // jump_statement_t

class jump_statement_continue_semicolon_t: public jump_statement_t {

public:

  std::unique_ptr<token_t> continue_0;

  std::unique_ptr<token_t> semicolon_1;

  jump_statement_continue_semicolon_t(
    std::unique_ptr<token_t> &&continue_0_,
    std::unique_ptr<token_t> &&semicolon_1_
  ): continue_0(std::move(continue_0_)),
     semicolon_1(std::move(semicolon_1_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<jump_statement_continue_semicolon_t> make(
    const token_t *CONTINUE_0_,
    const token_t *SEMICOLON_1_
  ) {
    return std::make_unique<jump_statement_continue_semicolon_t>(
      std::make_unique<token_t>(*CONTINUE_0_),
      std::make_unique<token_t>(*SEMICOLON_1_)
    );
  }

};  // jump_statement_continue_semicolon_t

class jump_statement_break_semicolon_t: public jump_statement_t {

public:

  std::unique_ptr<token_t> break_0;

  std::unique_ptr<token_t> semicolon_1;

  jump_statement_break_semicolon_t(
    std::unique_ptr<token_t> &&break_0_,
    std::unique_ptr<token_t> &&semicolon_1_
  ): break_0(std::move(break_0_)),
     semicolon_1(std::move(semicolon_1_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<jump_statement_break_semicolon_t> make(
    const token_t *BREAK_0_,
    const token_t *SEMICOLON_1_
  ) {
    return std::make_unique<jump_statement_break_semicolon_t>(
      std::make_unique<token_t>(*BREAK_0_),
      std::make_unique<token_t>(*SEMICOLON_1_)
    );
  }

};  // jump_statement_break_semicolon_t

class jump_statement_return_semicolon_t: public jump_statement_t {

public:

  std::unique_ptr<token_t> return_0;

  std::unique_ptr<token_t> semicolon_1;

  jump_statement_return_semicolon_t(
    std::unique_ptr<token_t> &&return_0_,
    std::unique_ptr<token_t> &&semicolon_1_
  ): return_0(std::move(return_0_)),
     semicolon_1(std::move(semicolon_1_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<jump_statement_return_semicolon_t> make(
    const token_t *RETURN_0_,
    const token_t *SEMICOLON_1_
  ) {
    return std::make_unique<jump_statement_return_semicolon_t>(
      std::make_unique<token_t>(*RETURN_0_),
      std::make_unique<token_t>(*SEMICOLON_1_)
    );
  }

};  // jump_statement_return_semicolon_t

class jump_statement_return_expression_semicolon_t: public jump_statement_t {

public:

  std::unique_ptr<token_t> return_0;

  std::unique_ptr<expression_t> expression_1;

  std::unique_ptr<token_t> semicolon_2;

  jump_statement_return_expression_semicolon_t(
    std::unique_ptr<token_t> &&return_0_,
    std::unique_ptr<expression_t> &&expression_1_,
    std::unique_ptr<token_t> &&semicolon_2_
  ): return_0(std::move(return_0_)),
     expression_1(std::move(expression_1_)),
     semicolon_2(std::move(semicolon_2_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<jump_statement_return_expression_semicolon_t> make(
    const token_t *RETURN_0_,
    std::unique_ptr<expression_t> &&expression_1_,
    const token_t *SEMICOLON_2_
  ) {
    return std::make_unique<jump_statement_return_expression_semicolon_t>(
      std::make_unique<token_t>(*RETURN_0_),
      std::move(expression_1_),
      std::make_unique<token_t>(*SEMICOLON_2_)
    );
  }

};  // jump_statement_return_expression_semicolon_t

class jump_statement_discard_semicolon_t: public jump_statement_t {

public:

  std::unique_ptr<token_t> discard_0;

  std::unique_ptr<token_t> semicolon_1;

  jump_statement_discard_semicolon_t(
    std::unique_ptr<token_t> &&discard_0_,
    std::unique_ptr<token_t> &&semicolon_1_
  ): discard_0(std::move(discard_0_)),
     semicolon_1(std::move(semicolon_1_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<jump_statement_discard_semicolon_t> make(
    const token_t *DISCARD_0_,
    const token_t *SEMICOLON_1_
  ) {
    return std::make_unique<jump_statement_discard_semicolon_t>(
      std::make_unique<token_t>(*DISCARD_0_),
      std::make_unique<token_t>(*SEMICOLON_1_)
    );
  }

};  // jump_statement_discard_semicolon_t

}   // ast

}   // gliss
