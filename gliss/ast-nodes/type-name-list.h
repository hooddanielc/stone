#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"

/**
 * Patterns for type_name_list
 *
 * 1. TYPE_NAME
 * 2. type_name_list COMMA TYPE_NAME
 */

namespace gliss {

namespace ast {

class type_name_list_t: public ast_t {

public:

  static constexpr int rules = 2;

  static constexpr int id = 262;

  virtual ~type_name_list_t() = default;

};  // type_name_list_t

class type_name_list_type_name_t: public type_name_list_t {

public:

  std::shared_ptr<ast_token_t> type_name_0;

  type_name_list_type_name_t(
    std::shared_ptr<ast_token_t> type_name_0_
  ): type_name_0(type_name_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 262;
  }

  static std::shared_ptr<type_name_list_type_name_t> make(
    std::shared_ptr<ast_token_t> TYPE_NAME_0_
  ) {
    return std::make_shared<type_name_list_type_name_t>(
      TYPE_NAME_0_
    );
  }

};  // type_name_list_type_name_t

class type_name_list_type_name_list_comma_type_name_t: public type_name_list_t {

public:

  std::shared_ptr<type_name_list_t> type_name_list_0;

  std::shared_ptr<ast_token_t> comma_1;

  std::shared_ptr<ast_token_t> type_name_2;

  type_name_list_type_name_list_comma_type_name_t(
    std::shared_ptr<type_name_list_t> type_name_list_0_,
    std::shared_ptr<ast_token_t> comma_1_,
    std::shared_ptr<ast_token_t> type_name_2_
  ): type_name_list_0(type_name_list_0_),
     comma_1(comma_1_),
     type_name_2(type_name_2_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 262;
  }

  static std::shared_ptr<type_name_list_type_name_list_comma_type_name_t> make(
    std::shared_ptr<type_name_list_t> type_name_list_0_,
    std::shared_ptr<ast_token_t> COMMA_1_,
    std::shared_ptr<ast_token_t> TYPE_NAME_2_
  ) {
    return std::make_shared<type_name_list_type_name_list_comma_type_name_t>(
      type_name_list_0_,
      COMMA_1_,
      TYPE_NAME_2_
    );
  }

};  // type_name_list_type_name_list_comma_type_name_t

}   // ast

}   // gliss
