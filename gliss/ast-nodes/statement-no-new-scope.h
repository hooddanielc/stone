#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "compound-statement-no-new-scope.h"
#include "simple-statement.h"

/**
 * Patterns for statement_no_new_scope
 *
 * 1. compound_statement_no_new_scope
 * 2. simple_statement
 */

namespace gliss {

namespace ast {

class compound_statement_no_new_scope_t;
class simple_statement_t;

class statement_no_new_scope_t: public ast_t {

public:

  static constexpr int rules = 2;

  static constexpr int id = 278;

  virtual ~statement_no_new_scope_t() = default;

};  // statement_no_new_scope_t

class statement_no_new_scope_compound_statement_no_new_scope_t: public statement_no_new_scope_t {

public:

  std::shared_ptr<compound_statement_no_new_scope_t> compound_statement_no_new_scope_0;

  statement_no_new_scope_compound_statement_no_new_scope_t(
    std::shared_ptr<compound_statement_no_new_scope_t> compound_statement_no_new_scope_0_
  ): compound_statement_no_new_scope_0(compound_statement_no_new_scope_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 278;
  }

  static std::shared_ptr<statement_no_new_scope_compound_statement_no_new_scope_t> make(
    std::shared_ptr<compound_statement_no_new_scope_t> compound_statement_no_new_scope_0_
  ) {
    return std::make_shared<statement_no_new_scope_compound_statement_no_new_scope_t>(
      compound_statement_no_new_scope_0_
    );
  }

};  // statement_no_new_scope_compound_statement_no_new_scope_t

class statement_no_new_scope_simple_statement_t: public statement_no_new_scope_t {

public:

  std::shared_ptr<simple_statement_t> simple_statement_0;

  statement_no_new_scope_simple_statement_t(
    std::shared_ptr<simple_statement_t> simple_statement_0_
  ): simple_statement_0(simple_statement_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 278;
  }

  static std::shared_ptr<statement_no_new_scope_simple_statement_t> make(
    std::shared_ptr<simple_statement_t> simple_statement_0_
  ) {
    return std::make_shared<statement_no_new_scope_simple_statement_t>(
      simple_statement_0_
    );
  }

};  // statement_no_new_scope_simple_statement_t

}   // ast

}   // gliss
