#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"

namespace gliss {

namespace ast {

class unary_operator_t: public ast_t {

public:

  static constexpr int num_types = 4;

  template <int n, typename = void>
  struct pattern;

  template<int n>
  struct pattern<n, typename std::enable_if<n == 0>::type> {
    using type = unary_operator_plus_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  template<int n>
  struct pattern<n, typename std::enable_if<n == 1>::type> {
    using type = unary_operator_dash_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  template<int n>
  struct pattern<n, typename std::enable_if<n == 2>::type> {
    using type = unary_operator_bang_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  template<int n>
  struct pattern<n, typename std::enable_if<n == 3>::type> {
    using type = unary_operator_tilde_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  virtual ~unary_operator_t() = default;

};  // unary_operator_t

class unary_operator_plus_t: public unary_operator_t {

public:

  std::unique_ptr<token_t> plus_0;

  unary_operator_plus_t(
    std::unique_ptr<token_t> &&plus_0_
  ): plus_0(std::move(plus_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // unary_operator_plus_t

class unary_operator_dash_t: public unary_operator_t {

public:

  std::unique_ptr<token_t> dash_0;

  unary_operator_dash_t(
    std::unique_ptr<token_t> &&dash_0_
  ): dash_0(std::move(dash_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // unary_operator_dash_t

class unary_operator_bang_t: public unary_operator_t {

public:

  std::unique_ptr<token_t> bang_0;

  unary_operator_bang_t(
    std::unique_ptr<token_t> &&bang_0_
  ): bang_0(std::move(bang_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // unary_operator_bang_t

class unary_operator_tilde_t: public unary_operator_t {

public:

  std::unique_ptr<token_t> tilde_0;

  unary_operator_tilde_t(
    std::unique_ptr<token_t> &&tilde_0_
  ): tilde_0(std::move(tilde_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // unary_operator_tilde_t

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> unary_operator_t::pattern<0>::list = {
  pattern_item_t<token_t>::get(token_t::uppercase_to_kind("PLUS"))
};

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> unary_operator_t::pattern<1>::list = {
  pattern_item_t<token_t>::get(token_t::uppercase_to_kind("DASH"))
};

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> unary_operator_t::pattern<2>::list = {
  pattern_item_t<token_t>::get(token_t::uppercase_to_kind("BANG"))
};

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> unary_operator_t::pattern<3>::list = {
  pattern_item_t<token_t>::get(token_t::uppercase_to_kind("TILDE"))
};

}   // ast

}   // gliss
