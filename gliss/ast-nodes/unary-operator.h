#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"

/**
 * Patterns for unary_operator
 *
 * 1. PLUS
 * 2. DASH
 * 3. BANG
 * 4. TILDE
 */

namespace gliss {

namespace ast {

class unary_operator_t: public ast_t {

public:

  static constexpr int rules = 4;

  static constexpr int id = 224;

  virtual ~unary_operator_t() = default;

};  // unary_operator_t

class unary_operator_plus_t: public unary_operator_t {

public:

  std::shared_ptr<ast_token_t> plus_0;

  unary_operator_plus_t(
    std::shared_ptr<ast_token_t> plus_0_
  ): plus_0(plus_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 224;
  }

  static std::shared_ptr<unary_operator_plus_t> make(
    std::shared_ptr<ast_token_t> PLUS_0_
  ) {
    return std::make_shared<unary_operator_plus_t>(
      PLUS_0_
    );
  }

};  // unary_operator_plus_t

class unary_operator_dash_t: public unary_operator_t {

public:

  std::shared_ptr<ast_token_t> dash_0;

  unary_operator_dash_t(
    std::shared_ptr<ast_token_t> dash_0_
  ): dash_0(dash_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 224;
  }

  static std::shared_ptr<unary_operator_dash_t> make(
    std::shared_ptr<ast_token_t> DASH_0_
  ) {
    return std::make_shared<unary_operator_dash_t>(
      DASH_0_
    );
  }

};  // unary_operator_dash_t

class unary_operator_bang_t: public unary_operator_t {

public:

  std::shared_ptr<ast_token_t> bang_0;

  unary_operator_bang_t(
    std::shared_ptr<ast_token_t> bang_0_
  ): bang_0(bang_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 224;
  }

  static std::shared_ptr<unary_operator_bang_t> make(
    std::shared_ptr<ast_token_t> BANG_0_
  ) {
    return std::make_shared<unary_operator_bang_t>(
      BANG_0_
    );
  }

};  // unary_operator_bang_t

class unary_operator_tilde_t: public unary_operator_t {

public:

  std::shared_ptr<ast_token_t> tilde_0;

  unary_operator_tilde_t(
    std::shared_ptr<ast_token_t> tilde_0_
  ): tilde_0(tilde_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 224;
  }

  static std::shared_ptr<unary_operator_tilde_t> make(
    std::shared_ptr<ast_token_t> TILDE_0_
  ) {
    return std::make_shared<unary_operator_tilde_t>(
      TILDE_0_
    );
  }

};  // unary_operator_tilde_t

}   // ast

}   // gliss
