#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"

/**
 * Patterns for precision_qualifier
 *
 * 1. HIGH_PRECISION
 * 2. MEDIUM_PRECISION
 * 3. LOW_PRECISION
 */

namespace gliss {

namespace ast {

class precision_qualifier_t: public ast_t {

public:

  static constexpr int rules = 3;

  static constexpr int id = 265;

  virtual ~precision_qualifier_t() = default;

};  // precision_qualifier_t

class precision_qualifier_high_precision_t: public precision_qualifier_t {

public:

  std::unique_ptr<token_t> high_precision_0;

  precision_qualifier_high_precision_t(
    std::unique_ptr<token_t> &&high_precision_0_
  ): high_precision_0(std::move(high_precision_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<precision_qualifier_high_precision_t> make(
    const token_t *HIGH_PRECISION_0_
  ) {
    return std::make_unique<precision_qualifier_high_precision_t>(
      std::make_unique<token_t>(*HIGH_PRECISION_0_)
    );
  }

};  // precision_qualifier_high_precision_t

class precision_qualifier_medium_precision_t: public precision_qualifier_t {

public:

  std::unique_ptr<token_t> medium_precision_0;

  precision_qualifier_medium_precision_t(
    std::unique_ptr<token_t> &&medium_precision_0_
  ): medium_precision_0(std::move(medium_precision_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<precision_qualifier_medium_precision_t> make(
    const token_t *MEDIUM_PRECISION_0_
  ) {
    return std::make_unique<precision_qualifier_medium_precision_t>(
      std::make_unique<token_t>(*MEDIUM_PRECISION_0_)
    );
  }

};  // precision_qualifier_medium_precision_t

class precision_qualifier_low_precision_t: public precision_qualifier_t {

public:

  std::unique_ptr<token_t> low_precision_0;

  precision_qualifier_low_precision_t(
    std::unique_ptr<token_t> &&low_precision_0_
  ): low_precision_0(std::move(low_precision_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<precision_qualifier_low_precision_t> make(
    const token_t *LOW_PRECISION_0_
  ) {
    return std::make_unique<precision_qualifier_low_precision_t>(
      std::make_unique<token_t>(*LOW_PRECISION_0_)
    );
  }

};  // precision_qualifier_low_precision_t

}   // ast

}   // gliss
