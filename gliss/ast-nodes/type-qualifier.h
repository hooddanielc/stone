#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "single-type-qualifier.h"

/**
 * Patterns for type_qualifier
 *
 * 1. single_type_qualifier
 * 2. type_qualifier single_type_qualifier
 */

namespace gliss {

namespace ast {

class single_type_qualifier_t;

class type_qualifier_t: public ast_t {

public:

  static constexpr int num_types = 2;

  virtual ~type_qualifier_t() = default;

};  // type_qualifier_t

class type_qualifier_single_type_qualifier_t: public type_qualifier_t {

public:

  std::unique_ptr<single_type_qualifier_t> single_type_qualifier_0;

  type_qualifier_single_type_qualifier_t(
    std::unique_ptr<single_type_qualifier_t> &&single_type_qualifier_0_
  ): single_type_qualifier_0(std::move(single_type_qualifier_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<type_qualifier_single_type_qualifier_t> make(
    std::unique_ptr<single_type_qualifier_t> &&single_type_qualifier_0_
  ) {
    return std::make_unique<type_qualifier_single_type_qualifier_t>(
      std::move(single_type_qualifier_0_)
    );
  }

};  // type_qualifier_single_type_qualifier_t

class type_qualifier_type_qualifier_single_type_qualifier_t: public type_qualifier_t {

public:

  std::unique_ptr<type_qualifier_t> type_qualifier_0;

  std::unique_ptr<single_type_qualifier_t> single_type_qualifier_1;

  type_qualifier_type_qualifier_single_type_qualifier_t(
    std::unique_ptr<type_qualifier_t> &&type_qualifier_0_,
    std::unique_ptr<single_type_qualifier_t> &&single_type_qualifier_1_
  ): type_qualifier_0(std::move(type_qualifier_0_)),
     single_type_qualifier_1(std::move(single_type_qualifier_1_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<type_qualifier_type_qualifier_single_type_qualifier_t> make(
    std::unique_ptr<type_qualifier_t> &&type_qualifier_0_,
    std::unique_ptr<single_type_qualifier_t> &&single_type_qualifier_1_
  ) {
    return std::make_unique<type_qualifier_type_qualifier_single_type_qualifier_t>(
      std::move(type_qualifier_0_),
      std::move(single_type_qualifier_1_)
    );
  }

};  // type_qualifier_type_qualifier_single_type_qualifier_t

}   // ast

}   // gliss
