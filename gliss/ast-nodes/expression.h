#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "assignment-expression.h"

/**
 * Patterns for expression
 *
 * 1. assignment_expression
 * 2. expression COMMA assignment_expression
 */

namespace gliss {

namespace ast {

class assignment_expression_t;

class expression_t: public ast_t {

public:

  static constexpr int rules = 2;

  static constexpr int id = 239;

  virtual ~expression_t() = default;

};  // expression_t

class expression_assignment_expression_t: public expression_t {

public:

  std::shared_ptr<assignment_expression_t> assignment_expression_0;

  expression_assignment_expression_t(
    std::shared_ptr<assignment_expression_t> assignment_expression_0_
  ): assignment_expression_0(assignment_expression_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 239;
  }

  static std::shared_ptr<expression_assignment_expression_t> make(
    std::shared_ptr<assignment_expression_t> assignment_expression_0_
  ) {
    return std::make_shared<expression_assignment_expression_t>(
      assignment_expression_0_
    );
  }

};  // expression_assignment_expression_t

class expression_expression_comma_assignment_expression_t: public expression_t {

public:

  std::shared_ptr<expression_t> expression_0;

  std::shared_ptr<ast_token_t> comma_1;

  std::shared_ptr<assignment_expression_t> assignment_expression_2;

  expression_expression_comma_assignment_expression_t(
    std::shared_ptr<expression_t> expression_0_,
    std::shared_ptr<ast_token_t> comma_1_,
    std::shared_ptr<assignment_expression_t> assignment_expression_2_
  ): expression_0(expression_0_),
     comma_1(comma_1_),
     assignment_expression_2(assignment_expression_2_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 239;
  }

  static std::shared_ptr<expression_expression_comma_assignment_expression_t> make(
    std::shared_ptr<expression_t> expression_0_,
    std::shared_ptr<ast_token_t> COMMA_1_,
    std::shared_ptr<assignment_expression_t> assignment_expression_2_
  ) {
    return std::make_shared<expression_expression_comma_assignment_expression_t>(
      expression_0_,
      COMMA_1_,
      assignment_expression_2_
    );
  }

};  // expression_expression_comma_assignment_expression_t

}   // ast

}   // gliss
