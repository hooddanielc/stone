#pragma once


/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */
  

#include <vector>
#include "../ast.h"
#include "assignment-expression.h"


namespace gliss {

namespace ast {

class assignment_expression_t;


class expression_t: public ast_t {

public:

  static constexpr int num_types = 2;

  template <int n, typename = void>
  struct pattern;

  template<int n>
  struct pattern<n, typename std::enable_if<n == 0>::type> {
    using type = expression_assignment_expression_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  template<int n>
  struct pattern<n, typename std::enable_if<n == 1>::type> {
    using type = expression_expression_comma_assignment_expression_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  virtual ~expression_t() = default;

};  // expression_t


class expression_assignment_expression_t: public expression_t {

public:

  std::unique_ptr<assignment_expression_t> assignment_expression_0;

  expression_assignment_expression_t(
    std::unique_ptr<assignment_expression_t> &&assignment_expression_0_
  ): assignment_expression_0(std::move(assignment_expression_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // expression_assignment_expression_t
  

class expression_expression_comma_assignment_expression_t: public expression_t {

public:

  std::unique_ptr<expression_t> expression_0;

  std::unique_ptr<token_t> comma_1;

  std::unique_ptr<assignment_expression_t> assignment_expression_2;

  expression_expression_comma_assignment_expression_t(
    std::unique_ptr<expression_t> &&expression_0_,
    std::unique_ptr<token_t> &&comma_1_,
    std::unique_ptr<assignment_expression_t> &&assignment_expression_2_
  ): expression_0(std::move(expression_0_)),
     comma_1(std::move(comma_1_)),
     assignment_expression_2(std::move(assignment_expression_2_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // expression_expression_comma_assignment_expression_t
  

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> expression_t::pattern<0>::list = {
  pattern_item_t<assignment_expression_t>::get()
};

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> expression_t::pattern<1>::list = {
  pattern_item_t<expression_t>::get(),
  pattern_item_t<token_t>::get(token_t::uppercase_to_kind("COMMA")),
  pattern_item_t<assignment_expression_t>::get()
};

}   // ast

}   // gliss
