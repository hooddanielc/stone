#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "assignment-expression.h"

/**
 * Patterns for expression
 *
 * 1. assignment_expression
 * 2. expression COMMA assignment_expression
 */

namespace gliss {

namespace ast {

class assignment_expression_t;

class expression_t: public ast_t {

public:

  static constexpr int num_types = 2;

  virtual ~expression_t() = default;

};  // expression_t

class expression_assignment_expression_t: public expression_t {

public:

  std::unique_ptr<assignment_expression_t> assignment_expression_0;

  expression_assignment_expression_t(
    std::unique_ptr<assignment_expression_t> &&assignment_expression_0_
  ): assignment_expression_0(std::move(assignment_expression_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<expression_assignment_expression_t> make(
    std::unique_ptr<assignment_expression_t> &&assignment_expression_0_
  ) {
    return std::make_unique<expression_assignment_expression_t>(
      std::move(assignment_expression_0_)
    );
  }

};  // expression_assignment_expression_t

class expression_expression_comma_assignment_expression_t: public expression_t {

public:

  std::unique_ptr<expression_t> expression_0;

  std::unique_ptr<token_t> comma_1;

  std::unique_ptr<assignment_expression_t> assignment_expression_2;

  expression_expression_comma_assignment_expression_t(
    std::unique_ptr<expression_t> &&expression_0_,
    std::unique_ptr<token_t> &&comma_1_,
    std::unique_ptr<assignment_expression_t> &&assignment_expression_2_
  ): expression_0(std::move(expression_0_)),
     comma_1(std::move(comma_1_)),
     assignment_expression_2(std::move(assignment_expression_2_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<expression_expression_comma_assignment_expression_t> make(
    std::unique_ptr<expression_t> &&expression_0_,
    const token_t *COMMA_1_,
    std::unique_ptr<assignment_expression_t> &&assignment_expression_2_
  ) {
    return std::make_unique<expression_expression_comma_assignment_expression_t>(
      std::move(expression_0_),
      std::make_unique<token_t>(*COMMA_1_),
      std::move(assignment_expression_2_)
    );
  }

};  // expression_expression_comma_assignment_expression_t

}   // ast

}   // gliss
