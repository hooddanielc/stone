#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "layout-qualifier-id-list.h"

/**
 * Patterns for layout_qualifier
 *
 * 1. LAYOUT LEFT_PAREN layout_qualifier_id_list RIGHT_PAREN
 */

namespace gliss {

namespace ast {

class layout_qualifier_id_list_t;

class layout_qualifier_t: public ast_t {

public:

  static constexpr int rules = 1;

  static constexpr int id = 255;

  virtual ~layout_qualifier_t() = default;

};  // layout_qualifier_t

class layout_qualifier_layout_left_paren_layout_qualifier_id_list_right_paren_t: public layout_qualifier_t {

public:

  std::shared_ptr<ast_token_t> layout_0;

  std::shared_ptr<ast_token_t> left_paren_1;

  std::shared_ptr<layout_qualifier_id_list_t> layout_qualifier_id_list_2;

  std::shared_ptr<ast_token_t> right_paren_3;

  layout_qualifier_layout_left_paren_layout_qualifier_id_list_right_paren_t(
    std::shared_ptr<ast_token_t> layout_0_,
    std::shared_ptr<ast_token_t> left_paren_1_,
    std::shared_ptr<layout_qualifier_id_list_t> layout_qualifier_id_list_2_,
    std::shared_ptr<ast_token_t> right_paren_3_
  ): layout_0(layout_0_),
     left_paren_1(left_paren_1_),
     layout_qualifier_id_list_2(layout_qualifier_id_list_2_),
     right_paren_3(right_paren_3_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 255;
  }

  static std::shared_ptr<layout_qualifier_layout_left_paren_layout_qualifier_id_list_right_paren_t> make(
    std::shared_ptr<ast_token_t> LAYOUT_0_,
    std::shared_ptr<ast_token_t> LEFT_PAREN_1_,
    std::shared_ptr<layout_qualifier_id_list_t> layout_qualifier_id_list_2_,
    std::shared_ptr<ast_token_t> RIGHT_PAREN_3_
  ) {
    return std::make_shared<layout_qualifier_layout_left_paren_layout_qualifier_id_list_right_paren_t>(
      LAYOUT_0_,
      LEFT_PAREN_1_,
      layout_qualifier_id_list_2_,
      RIGHT_PAREN_3_
    );
  }

};  // layout_qualifier_layout_left_paren_layout_qualifier_id_list_right_paren_t

}   // ast

}   // gliss
