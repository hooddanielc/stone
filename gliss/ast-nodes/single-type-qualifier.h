#pragma once


/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */
  

#include <vector>
#include "../ast.h"
#include "storage-qualifier.h"
#include "layout-qualifier.h"
#include "precision-qualifier.h"
#include "interpolation-qualifier.h"
#include "invariant-qualifier.h"
#include "precise-qualifier.h"

namespace gliss {

namespace ast {

class single_type_qualifier_t: public ast_t {

public:

  static const std::vector<std::vector<any_pattern_item_t>> patterns;

  single_type_qualifier_t(
    const storage_qualifier_t &
  );

  single_type_qualifier_t(
    const layout_qualifier_t &
  );

  single_type_qualifier_t(
    const precision_qualifier_t &
  );

  single_type_qualifier_t(
    const interpolation_qualifier_t &
  );

  single_type_qualifier_t(
    const invariant_qualifier_t &
  );

  single_type_qualifier_t(
    const precise_qualifier_t &
  );

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // single_type_qualifier_t

const std::vector<std::vector<any_pattern_item_t>> single_type_qualifier_t::patterns = {
  {
    pattern_item_t<storage_qualifier_t>::get()
  }, {
    pattern_item_t<layout_qualifier_t>::get()
  }, {
    pattern_item_t<precision_qualifier_t>::get()
  }, {
    pattern_item_t<interpolation_qualifier_t>::get()
  }, {
    pattern_item_t<invariant_qualifier_t>::get()
  }, {
    pattern_item_t<precise_qualifier_t>::get()
  }
};

}   // ast

}   // gliss
