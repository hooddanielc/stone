#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "additive-expression.h"

/**
 * Patterns for shift_expression
 *
 * 1. additive_expression
 * 2. shift_expression LEFT_OP additive_expression
 * 3. shift_expression RIGHT_OP additive_expression
 */

namespace gliss {

namespace ast {

class additive_expression_t;

class shift_expression_t: public ast_t {

public:

  static constexpr int num_types = 3;

  virtual ~shift_expression_t() = default;

};  // shift_expression_t

class shift_expression_additive_expression_t: public shift_expression_t {

public:

  std::unique_ptr<additive_expression_t> additive_expression_0;

  shift_expression_additive_expression_t(
    std::unique_ptr<additive_expression_t> &&additive_expression_0_
  ): additive_expression_0(std::move(additive_expression_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<shift_expression_additive_expression_t> make(
    std::unique_ptr<additive_expression_t> &&additive_expression_0_
  ) {
    return std::make_unique<shift_expression_additive_expression_t>(
      std::move(additive_expression_0_)
    );
  }

};  // shift_expression_additive_expression_t

class shift_expression_shift_expression_left_op_additive_expression_t: public shift_expression_t {

public:

  std::unique_ptr<shift_expression_t> shift_expression_0;

  std::unique_ptr<token_t> left_op_1;

  std::unique_ptr<additive_expression_t> additive_expression_2;

  shift_expression_shift_expression_left_op_additive_expression_t(
    std::unique_ptr<shift_expression_t> &&shift_expression_0_,
    std::unique_ptr<token_t> &&left_op_1_,
    std::unique_ptr<additive_expression_t> &&additive_expression_2_
  ): shift_expression_0(std::move(shift_expression_0_)),
     left_op_1(std::move(left_op_1_)),
     additive_expression_2(std::move(additive_expression_2_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<shift_expression_shift_expression_left_op_additive_expression_t> make(
    std::unique_ptr<shift_expression_t> &&shift_expression_0_,
    const token_t *LEFT_OP_1_,
    std::unique_ptr<additive_expression_t> &&additive_expression_2_
  ) {
    return std::make_unique<shift_expression_shift_expression_left_op_additive_expression_t>(
      std::move(shift_expression_0_),
      std::make_unique<token_t>(*LEFT_OP_1_),
      std::move(additive_expression_2_)
    );
  }

};  // shift_expression_shift_expression_left_op_additive_expression_t

class shift_expression_shift_expression_right_op_additive_expression_t: public shift_expression_t {

public:

  std::unique_ptr<shift_expression_t> shift_expression_0;

  std::unique_ptr<token_t> right_op_1;

  std::unique_ptr<additive_expression_t> additive_expression_2;

  shift_expression_shift_expression_right_op_additive_expression_t(
    std::unique_ptr<shift_expression_t> &&shift_expression_0_,
    std::unique_ptr<token_t> &&right_op_1_,
    std::unique_ptr<additive_expression_t> &&additive_expression_2_
  ): shift_expression_0(std::move(shift_expression_0_)),
     right_op_1(std::move(right_op_1_)),
     additive_expression_2(std::move(additive_expression_2_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<shift_expression_shift_expression_right_op_additive_expression_t> make(
    std::unique_ptr<shift_expression_t> &&shift_expression_0_,
    const token_t *RIGHT_OP_1_,
    std::unique_ptr<additive_expression_t> &&additive_expression_2_
  ) {
    return std::make_unique<shift_expression_shift_expression_right_op_additive_expression_t>(
      std::move(shift_expression_0_),
      std::make_unique<token_t>(*RIGHT_OP_1_),
      std::move(additive_expression_2_)
    );
  }

};  // shift_expression_shift_expression_right_op_additive_expression_t

}   // ast

}   // gliss
