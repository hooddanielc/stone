#pragma once


/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */
  

#include <vector>
#include "../ast.h"
#include "additive-expression.h"


namespace gliss {

namespace ast {

class additive_expression_t;


class shift_expression_t: public ast_t {

public:

  static constexpr int num_types = 3;

  template <int n, typename = void>
  struct pattern;

  template<int n>
  struct pattern<n, typename std::enable_if<n == 0>::type> {
    using type = shift_expression_additive_expression_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  template<int n>
  struct pattern<n, typename std::enable_if<n == 1>::type> {
    using type = shift_expression_shift_expression_left_op_additive_expression_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  template<int n>
  struct pattern<n, typename std::enable_if<n == 2>::type> {
    using type = shift_expression_shift_expression_right_op_additive_expression_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  virtual ~shift_expression_t() = default;

};  // shift_expression_t


class shift_expression_additive_expression_t: public shift_expression_t {

public:

  std::unique_ptr<additive_expression_t> additive_expression_0;

  shift_expression_additive_expression_t(
    std::unique_ptr<additive_expression_t> &&additive_expression_0_
  ): additive_expression_0(std::move(additive_expression_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // shift_expression_additive_expression_t
  

class shift_expression_shift_expression_left_op_additive_expression_t: public shift_expression_t {

public:

  std::unique_ptr<shift_expression_t> shift_expression_0;

  std::unique_ptr<token_t> left_op_1;

  std::unique_ptr<additive_expression_t> additive_expression_2;

  shift_expression_shift_expression_left_op_additive_expression_t(
    std::unique_ptr<shift_expression_t> &&shift_expression_0_,
    std::unique_ptr<token_t> &&left_op_1_,
    std::unique_ptr<additive_expression_t> &&additive_expression_2_
  ): shift_expression_0(std::move(shift_expression_0_)),
     left_op_1(std::move(left_op_1_)),
     additive_expression_2(std::move(additive_expression_2_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // shift_expression_shift_expression_left_op_additive_expression_t
  

class shift_expression_shift_expression_right_op_additive_expression_t: public shift_expression_t {

public:

  std::unique_ptr<shift_expression_t> shift_expression_0;

  std::unique_ptr<token_t> right_op_1;

  std::unique_ptr<additive_expression_t> additive_expression_2;

  shift_expression_shift_expression_right_op_additive_expression_t(
    std::unique_ptr<shift_expression_t> &&shift_expression_0_,
    std::unique_ptr<token_t> &&right_op_1_,
    std::unique_ptr<additive_expression_t> &&additive_expression_2_
  ): shift_expression_0(std::move(shift_expression_0_)),
     right_op_1(std::move(right_op_1_)),
     additive_expression_2(std::move(additive_expression_2_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // shift_expression_shift_expression_right_op_additive_expression_t
  

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> shift_expression_t::pattern<0>::list = {
  pattern_item_t<additive_expression_t>::get()
};

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> shift_expression_t::pattern<1>::list = {
  pattern_item_t<shift_expression_t>::get(),
  pattern_item_t<token_t>::get(token_t::uppercase_to_kind("LEFT_OP")),
  pattern_item_t<additive_expression_t>::get()
};

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> shift_expression_t::pattern<2>::list = {
  pattern_item_t<shift_expression_t>::get(),
  pattern_item_t<token_t>::get(token_t::uppercase_to_kind("RIGHT_OP")),
  pattern_item_t<additive_expression_t>::get()
};

}   // ast

}   // gliss
