#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "conditional-expression.h"

/**
 * Patterns for array_specifier
 *
 * 1. LEFT_BRACKET RIGHT_BRACKET
 * 2. LEFT_BRACKET conditional_expression RIGHT_BRACKET
 * 3. array_specifier LEFT_BRACKET RIGHT_BRACKET
 * 4. array_specifier LEFT_BRACKET conditional_expression RIGHT_BRACKET
 */

namespace gliss {

namespace ast {

class conditional_expression_t;

class array_specifier_t: public ast_t {

public:

  static constexpr int rules = 4;

  static constexpr int id = 264;

  virtual ~array_specifier_t() = default;

};  // array_specifier_t

class array_specifier_left_bracket_right_bracket_t: public array_specifier_t {

public:

  std::shared_ptr<ast_token_t> left_bracket_0;

  std::shared_ptr<ast_token_t> right_bracket_1;

  array_specifier_left_bracket_right_bracket_t(
    std::shared_ptr<ast_token_t> left_bracket_0_,
    std::shared_ptr<ast_token_t> right_bracket_1_
  ): left_bracket_0(left_bracket_0_),
     right_bracket_1(right_bracket_1_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 264;
  }

  static std::shared_ptr<array_specifier_left_bracket_right_bracket_t> make(
    std::shared_ptr<ast_token_t> LEFT_BRACKET_0_,
    std::shared_ptr<ast_token_t> RIGHT_BRACKET_1_
  ) {
    return std::make_shared<array_specifier_left_bracket_right_bracket_t>(
      LEFT_BRACKET_0_,
      RIGHT_BRACKET_1_
    );
  }

};  // array_specifier_left_bracket_right_bracket_t

class array_specifier_left_bracket_conditional_expression_right_bracket_t: public array_specifier_t {

public:

  std::shared_ptr<ast_token_t> left_bracket_0;

  std::shared_ptr<conditional_expression_t> conditional_expression_1;

  std::shared_ptr<ast_token_t> right_bracket_2;

  array_specifier_left_bracket_conditional_expression_right_bracket_t(
    std::shared_ptr<ast_token_t> left_bracket_0_,
    std::shared_ptr<conditional_expression_t> conditional_expression_1_,
    std::shared_ptr<ast_token_t> right_bracket_2_
  ): left_bracket_0(left_bracket_0_),
     conditional_expression_1(conditional_expression_1_),
     right_bracket_2(right_bracket_2_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 264;
  }

  static std::shared_ptr<array_specifier_left_bracket_conditional_expression_right_bracket_t> make(
    std::shared_ptr<ast_token_t> LEFT_BRACKET_0_,
    std::shared_ptr<conditional_expression_t> conditional_expression_1_,
    std::shared_ptr<ast_token_t> RIGHT_BRACKET_2_
  ) {
    return std::make_shared<array_specifier_left_bracket_conditional_expression_right_bracket_t>(
      LEFT_BRACKET_0_,
      conditional_expression_1_,
      RIGHT_BRACKET_2_
    );
  }

};  // array_specifier_left_bracket_conditional_expression_right_bracket_t

class array_specifier_array_specifier_left_bracket_right_bracket_t: public array_specifier_t {

public:

  std::shared_ptr<array_specifier_t> array_specifier_0;

  std::shared_ptr<ast_token_t> left_bracket_1;

  std::shared_ptr<ast_token_t> right_bracket_2;

  array_specifier_array_specifier_left_bracket_right_bracket_t(
    std::shared_ptr<array_specifier_t> array_specifier_0_,
    std::shared_ptr<ast_token_t> left_bracket_1_,
    std::shared_ptr<ast_token_t> right_bracket_2_
  ): array_specifier_0(array_specifier_0_),
     left_bracket_1(left_bracket_1_),
     right_bracket_2(right_bracket_2_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 264;
  }

  static std::shared_ptr<array_specifier_array_specifier_left_bracket_right_bracket_t> make(
    std::shared_ptr<array_specifier_t> array_specifier_0_,
    std::shared_ptr<ast_token_t> LEFT_BRACKET_1_,
    std::shared_ptr<ast_token_t> RIGHT_BRACKET_2_
  ) {
    return std::make_shared<array_specifier_array_specifier_left_bracket_right_bracket_t>(
      array_specifier_0_,
      LEFT_BRACKET_1_,
      RIGHT_BRACKET_2_
    );
  }

};  // array_specifier_array_specifier_left_bracket_right_bracket_t

class array_specifier_array_specifier_left_bracket_conditional_expression_right_bracket_t: public array_specifier_t {

public:

  std::shared_ptr<array_specifier_t> array_specifier_0;

  std::shared_ptr<ast_token_t> left_bracket_1;

  std::shared_ptr<conditional_expression_t> conditional_expression_2;

  std::shared_ptr<ast_token_t> right_bracket_3;

  array_specifier_array_specifier_left_bracket_conditional_expression_right_bracket_t(
    std::shared_ptr<array_specifier_t> array_specifier_0_,
    std::shared_ptr<ast_token_t> left_bracket_1_,
    std::shared_ptr<conditional_expression_t> conditional_expression_2_,
    std::shared_ptr<ast_token_t> right_bracket_3_
  ): array_specifier_0(array_specifier_0_),
     left_bracket_1(left_bracket_1_),
     conditional_expression_2(conditional_expression_2_),
     right_bracket_3(right_bracket_3_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 264;
  }

  static std::shared_ptr<array_specifier_array_specifier_left_bracket_conditional_expression_right_bracket_t> make(
    std::shared_ptr<array_specifier_t> array_specifier_0_,
    std::shared_ptr<ast_token_t> LEFT_BRACKET_1_,
    std::shared_ptr<conditional_expression_t> conditional_expression_2_,
    std::shared_ptr<ast_token_t> RIGHT_BRACKET_3_
  ) {
    return std::make_shared<array_specifier_array_specifier_left_bracket_conditional_expression_right_bracket_t>(
      array_specifier_0_,
      LEFT_BRACKET_1_,
      conditional_expression_2_,
      RIGHT_BRACKET_3_
    );
  }

};  // array_specifier_array_specifier_left_bracket_conditional_expression_right_bracket_t

}   // ast

}   // gliss
