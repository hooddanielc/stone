#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "conditional-expression.h"

/**
 * Patterns for array_specifier
 *
 * 1. LEFT_BRACKET RIGHT_BRACKET
 * 2. LEFT_BRACKET conditional_expression RIGHT_BRACKET
 * 3. array_specifier LEFT_BRACKET RIGHT_BRACKET
 * 4. array_specifier LEFT_BRACKET conditional_expression RIGHT_BRACKET
 */

namespace gliss {

namespace ast {

class conditional_expression_t;

class array_specifier_t: public ast_t {

public:

  static constexpr int rules = 4;

  static constexpr int id = 263;

  virtual ~array_specifier_t() = default;

};  // array_specifier_t

class array_specifier_left_bracket_right_bracket_t: public array_specifier_t {

public:

  std::unique_ptr<token_t> left_bracket_0;

  std::unique_ptr<token_t> right_bracket_1;

  array_specifier_left_bracket_right_bracket_t(
    std::unique_ptr<token_t> &&left_bracket_0_,
    std::unique_ptr<token_t> &&right_bracket_1_
  ): left_bracket_0(std::move(left_bracket_0_)),
     right_bracket_1(std::move(right_bracket_1_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<array_specifier_left_bracket_right_bracket_t> make(
    const token_t *LEFT_BRACKET_0_,
    const token_t *RIGHT_BRACKET_1_
  ) {
    return std::make_unique<array_specifier_left_bracket_right_bracket_t>(
      std::make_unique<token_t>(*LEFT_BRACKET_0_),
      std::make_unique<token_t>(*RIGHT_BRACKET_1_)
    );
  }

};  // array_specifier_left_bracket_right_bracket_t

class array_specifier_left_bracket_conditional_expression_right_bracket_t: public array_specifier_t {

public:

  std::unique_ptr<token_t> left_bracket_0;

  std::unique_ptr<conditional_expression_t> conditional_expression_1;

  std::unique_ptr<token_t> right_bracket_2;

  array_specifier_left_bracket_conditional_expression_right_bracket_t(
    std::unique_ptr<token_t> &&left_bracket_0_,
    std::unique_ptr<conditional_expression_t> &&conditional_expression_1_,
    std::unique_ptr<token_t> &&right_bracket_2_
  ): left_bracket_0(std::move(left_bracket_0_)),
     conditional_expression_1(std::move(conditional_expression_1_)),
     right_bracket_2(std::move(right_bracket_2_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<array_specifier_left_bracket_conditional_expression_right_bracket_t> make(
    const token_t *LEFT_BRACKET_0_,
    std::unique_ptr<conditional_expression_t> &&conditional_expression_1_,
    const token_t *RIGHT_BRACKET_2_
  ) {
    return std::make_unique<array_specifier_left_bracket_conditional_expression_right_bracket_t>(
      std::make_unique<token_t>(*LEFT_BRACKET_0_),
      std::move(conditional_expression_1_),
      std::make_unique<token_t>(*RIGHT_BRACKET_2_)
    );
  }

};  // array_specifier_left_bracket_conditional_expression_right_bracket_t

class array_specifier_array_specifier_left_bracket_right_bracket_t: public array_specifier_t {

public:

  std::unique_ptr<array_specifier_t> array_specifier_0;

  std::unique_ptr<token_t> left_bracket_1;

  std::unique_ptr<token_t> right_bracket_2;

  array_specifier_array_specifier_left_bracket_right_bracket_t(
    std::unique_ptr<array_specifier_t> &&array_specifier_0_,
    std::unique_ptr<token_t> &&left_bracket_1_,
    std::unique_ptr<token_t> &&right_bracket_2_
  ): array_specifier_0(std::move(array_specifier_0_)),
     left_bracket_1(std::move(left_bracket_1_)),
     right_bracket_2(std::move(right_bracket_2_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<array_specifier_array_specifier_left_bracket_right_bracket_t> make(
    std::unique_ptr<array_specifier_t> &&array_specifier_0_,
    const token_t *LEFT_BRACKET_1_,
    const token_t *RIGHT_BRACKET_2_
  ) {
    return std::make_unique<array_specifier_array_specifier_left_bracket_right_bracket_t>(
      std::move(array_specifier_0_),
      std::make_unique<token_t>(*LEFT_BRACKET_1_),
      std::make_unique<token_t>(*RIGHT_BRACKET_2_)
    );
  }

};  // array_specifier_array_specifier_left_bracket_right_bracket_t

class array_specifier_array_specifier_left_bracket_conditional_expression_right_bracket_t: public array_specifier_t {

public:

  std::unique_ptr<array_specifier_t> array_specifier_0;

  std::unique_ptr<token_t> left_bracket_1;

  std::unique_ptr<conditional_expression_t> conditional_expression_2;

  std::unique_ptr<token_t> right_bracket_3;

  array_specifier_array_specifier_left_bracket_conditional_expression_right_bracket_t(
    std::unique_ptr<array_specifier_t> &&array_specifier_0_,
    std::unique_ptr<token_t> &&left_bracket_1_,
    std::unique_ptr<conditional_expression_t> &&conditional_expression_2_,
    std::unique_ptr<token_t> &&right_bracket_3_
  ): array_specifier_0(std::move(array_specifier_0_)),
     left_bracket_1(std::move(left_bracket_1_)),
     conditional_expression_2(std::move(conditional_expression_2_)),
     right_bracket_3(std::move(right_bracket_3_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<array_specifier_array_specifier_left_bracket_conditional_expression_right_bracket_t> make(
    std::unique_ptr<array_specifier_t> &&array_specifier_0_,
    const token_t *LEFT_BRACKET_1_,
    std::unique_ptr<conditional_expression_t> &&conditional_expression_2_,
    const token_t *RIGHT_BRACKET_3_
  ) {
    return std::make_unique<array_specifier_array_specifier_left_bracket_conditional_expression_right_bracket_t>(
      std::move(array_specifier_0_),
      std::make_unique<token_t>(*LEFT_BRACKET_1_),
      std::move(conditional_expression_2_),
      std::make_unique<token_t>(*RIGHT_BRACKET_3_)
    );
  }

};  // array_specifier_array_specifier_left_bracket_conditional_expression_right_bracket_t

}   // ast

}   // gliss
