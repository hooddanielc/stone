#pragma once


/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */
  

#include <vector>
#include "../ast.h"
#include "array-specifier-conditional.h"

#include "array-specifier-conditional-nested.h"

namespace gliss {

namespace ast {

class array_specifier_t: public ast_t {

public:

  static const std::vector<std::vector<any_pattern_item_t>> patterns;

  array_specifier_t(
    const token_t &,
    const token_t &
  );

  array_specifier_t(
    const array_specifier_conditional_t &
  );

  array_specifier_t(
    const array_specifier_t &,
    const token_t &,
    const token_t &
  );

  array_specifier_t(
    const array_specifier_conditional_nested_t &
  );

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // array_specifier_t

const std::vector<std::vector<any_pattern_item_t>> array_specifier_t::patterns = {
  {
    pattern_item_t<token_t>::get(token_t::uppercase_to_kind("LEFT_BRACKET")),
    pattern_item_t<token_t>::get(token_t::uppercase_to_kind("RIGHT_BRACKET"))
  }, {
    pattern_item_t<array_specifier_conditional_t>::get()
  }, {
    pattern_item_t<array_specifier_t>::get(),
    pattern_item_t<token_t>::get(token_t::uppercase_to_kind("LEFT_BRACKET")),
    pattern_item_t<token_t>::get(token_t::uppercase_to_kind("RIGHT_BRACKET"))
  }, {
    pattern_item_t<array_specifier_conditional_nested_t>::get()
  }
};

}   // ast

}   // gliss
