#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "variable-identifier.h"
#include "expression.h"

/**
 * Patterns for primary_expression
 *
 * 1. variable_identifier
 * 2. INTCONSTANT
 * 3. UINTCONSTANT
 * 4. FLOATCONSTANT
 * 5. BOOLCONSTANT
 * 6. DOUBLECONSTANT
 * 7. LEFT_PAREN expression RIGHT_PAREN
 */

namespace gliss {

namespace ast {

class variable_identifier_t;
class expression_t;

class primary_expression_t: public ast_t {

public:

  static constexpr int num_types = 7;

  virtual ~primary_expression_t() = default;

};  // primary_expression_t

class primary_expression_variable_identifier_t: public primary_expression_t {

public:

  std::unique_ptr<variable_identifier_t> variable_identifier_0;

  primary_expression_variable_identifier_t(
    std::unique_ptr<variable_identifier_t> &&variable_identifier_0_
  ): variable_identifier_0(std::move(variable_identifier_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<primary_expression_variable_identifier_t> make(
    std::unique_ptr<variable_identifier_t> &&variable_identifier_0_
  ) {
    return std::make_unique<primary_expression_variable_identifier_t>(
      std::move(variable_identifier_0_)
    );
  }

};  // primary_expression_variable_identifier_t

class primary_expression_intconstant_t: public primary_expression_t {

public:

  std::unique_ptr<token_t> intconstant_0;

  primary_expression_intconstant_t(
    std::unique_ptr<token_t> &&intconstant_0_
  ): intconstant_0(std::move(intconstant_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<primary_expression_intconstant_t> make(
    const token_t *INTCONSTANT_0_
  ) {
    return std::make_unique<primary_expression_intconstant_t>(
      std::make_unique<token_t>(*INTCONSTANT_0_)
    );
  }

};  // primary_expression_intconstant_t

class primary_expression_uintconstant_t: public primary_expression_t {

public:

  std::unique_ptr<token_t> uintconstant_0;

  primary_expression_uintconstant_t(
    std::unique_ptr<token_t> &&uintconstant_0_
  ): uintconstant_0(std::move(uintconstant_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<primary_expression_uintconstant_t> make(
    const token_t *UINTCONSTANT_0_
  ) {
    return std::make_unique<primary_expression_uintconstant_t>(
      std::make_unique<token_t>(*UINTCONSTANT_0_)
    );
  }

};  // primary_expression_uintconstant_t

class primary_expression_floatconstant_t: public primary_expression_t {

public:

  std::unique_ptr<token_t> floatconstant_0;

  primary_expression_floatconstant_t(
    std::unique_ptr<token_t> &&floatconstant_0_
  ): floatconstant_0(std::move(floatconstant_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<primary_expression_floatconstant_t> make(
    const token_t *FLOATCONSTANT_0_
  ) {
    return std::make_unique<primary_expression_floatconstant_t>(
      std::make_unique<token_t>(*FLOATCONSTANT_0_)
    );
  }

};  // primary_expression_floatconstant_t

class primary_expression_boolconstant_t: public primary_expression_t {

public:

  std::unique_ptr<token_t> boolconstant_0;

  primary_expression_boolconstant_t(
    std::unique_ptr<token_t> &&boolconstant_0_
  ): boolconstant_0(std::move(boolconstant_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<primary_expression_boolconstant_t> make(
    const token_t *BOOLCONSTANT_0_
  ) {
    return std::make_unique<primary_expression_boolconstant_t>(
      std::make_unique<token_t>(*BOOLCONSTANT_0_)
    );
  }

};  // primary_expression_boolconstant_t

class primary_expression_doubleconstant_t: public primary_expression_t {

public:

  std::unique_ptr<token_t> doubleconstant_0;

  primary_expression_doubleconstant_t(
    std::unique_ptr<token_t> &&doubleconstant_0_
  ): doubleconstant_0(std::move(doubleconstant_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<primary_expression_doubleconstant_t> make(
    const token_t *DOUBLECONSTANT_0_
  ) {
    return std::make_unique<primary_expression_doubleconstant_t>(
      std::make_unique<token_t>(*DOUBLECONSTANT_0_)
    );
  }

};  // primary_expression_doubleconstant_t

class primary_expression_left_paren_expression_right_paren_t: public primary_expression_t {

public:

  std::unique_ptr<token_t> left_paren_0;

  std::unique_ptr<expression_t> expression_1;

  std::unique_ptr<token_t> right_paren_2;

  primary_expression_left_paren_expression_right_paren_t(
    std::unique_ptr<token_t> &&left_paren_0_,
    std::unique_ptr<expression_t> &&expression_1_,
    std::unique_ptr<token_t> &&right_paren_2_
  ): left_paren_0(std::move(left_paren_0_)),
     expression_1(std::move(expression_1_)),
     right_paren_2(std::move(right_paren_2_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<primary_expression_left_paren_expression_right_paren_t> make(
    const token_t *LEFT_PAREN_0_,
    std::unique_ptr<expression_t> &&expression_1_,
    const token_t *RIGHT_PAREN_2_
  ) {
    return std::make_unique<primary_expression_left_paren_expression_right_paren_t>(
      std::make_unique<token_t>(*LEFT_PAREN_0_),
      std::move(expression_1_),
      std::make_unique<token_t>(*RIGHT_PAREN_2_)
    );
  }

};  // primary_expression_left_paren_expression_right_paren_t

}   // ast

}   // gliss
