#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "array-specifier.h"

/**
 * Patterns for struct_declarator
 *
 * 1. IDENTIFIER
 * 2. IDENTIFIER array_specifier
 */

namespace gliss {

namespace ast {

class array_specifier_t;

class struct_declarator_t: public ast_t {

public:

  static constexpr int rules = 2;

  static constexpr int id = 271;

  virtual ~struct_declarator_t() = default;

};  // struct_declarator_t

class struct_declarator_identifier_t: public struct_declarator_t {

public:

  std::shared_ptr<ast_token_t> identifier_0;

  struct_declarator_identifier_t(
    std::shared_ptr<ast_token_t> identifier_0_
  ): identifier_0(identifier_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 271;
  }

  static std::shared_ptr<struct_declarator_identifier_t> make(
    std::shared_ptr<ast_token_t> IDENTIFIER_0_
  ) {
    return std::make_shared<struct_declarator_identifier_t>(
      IDENTIFIER_0_
    );
  }

};  // struct_declarator_identifier_t

class struct_declarator_identifier_array_specifier_t: public struct_declarator_t {

public:

  std::shared_ptr<ast_token_t> identifier_0;

  std::shared_ptr<array_specifier_t> array_specifier_1;

  struct_declarator_identifier_array_specifier_t(
    std::shared_ptr<ast_token_t> identifier_0_,
    std::shared_ptr<array_specifier_t> array_specifier_1_
  ): identifier_0(identifier_0_),
     array_specifier_1(array_specifier_1_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 271;
  }

  static std::shared_ptr<struct_declarator_identifier_array_specifier_t> make(
    std::shared_ptr<ast_token_t> IDENTIFIER_0_,
    std::shared_ptr<array_specifier_t> array_specifier_1_
  ) {
    return std::make_shared<struct_declarator_identifier_array_specifier_t>(
      IDENTIFIER_0_,
      array_specifier_1_
    );
  }

};  // struct_declarator_identifier_array_specifier_t

}   // ast

}   // gliss
