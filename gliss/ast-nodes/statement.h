#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "compound-statement.h"
#include "simple-statement.h"

namespace gliss {

namespace ast {

class compound_statement_t;
class simple_statement_t;

class statement_t: public ast_t {

public:

  static constexpr int num_types = 2;

  template <int n, typename = void>
  struct pattern;

  template<int n>
  struct pattern<n, typename std::enable_if<n == 0>::type> {
    using type = statement_compound_statement_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  template<int n>
  struct pattern<n, typename std::enable_if<n == 1>::type> {
    using type = statement_simple_statement_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  virtual ~statement_t() = default;

};  // statement_t

class statement_compound_statement_t: public statement_t {

public:

  std::unique_ptr<compound_statement_t> compound_statement_0;

  statement_compound_statement_t(
    std::unique_ptr<compound_statement_t> &&compound_statement_0_
  ): compound_statement_0(std::move(compound_statement_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // statement_compound_statement_t

class statement_simple_statement_t: public statement_t {

public:

  std::unique_ptr<simple_statement_t> simple_statement_0;

  statement_simple_statement_t(
    std::unique_ptr<simple_statement_t> &&simple_statement_0_
  ): simple_statement_0(std::move(simple_statement_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // statement_simple_statement_t

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> statement_t::pattern<0>::list = {
  pattern_item_t<compound_statement_t>::get()
};

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> statement_t::pattern<1>::list = {
  pattern_item_t<simple_statement_t>::get()
};

}   // ast

}   // gliss
