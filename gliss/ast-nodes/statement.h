#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "compound-statement.h"
#include "simple-statement.h"

/**
 * Patterns for statement
 *
 * 1. compound_statement
 * 2. simple_statement
 */

namespace gliss {

namespace ast {

class compound_statement_t;
class simple_statement_t;

class statement_t: public ast_t {

public:

  static constexpr int num_types = 2;

  virtual ~statement_t() = default;

};  // statement_t

class statement_compound_statement_t: public statement_t {

public:

  std::unique_ptr<compound_statement_t> compound_statement_0;

  statement_compound_statement_t(
    std::unique_ptr<compound_statement_t> &&compound_statement_0_
  ): compound_statement_0(std::move(compound_statement_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<statement_compound_statement_t> make(
    std::unique_ptr<compound_statement_t> &&compound_statement_0_
  ) {
    return std::make_unique<statement_compound_statement_t>(
      std::move(compound_statement_0_)
    );
  }

};  // statement_compound_statement_t

class statement_simple_statement_t: public statement_t {

public:

  std::unique_ptr<simple_statement_t> simple_statement_0;

  statement_simple_statement_t(
    std::unique_ptr<simple_statement_t> &&simple_statement_0_
  ): simple_statement_0(std::move(simple_statement_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<statement_simple_statement_t> make(
    std::unique_ptr<simple_statement_t> &&simple_statement_0_
  ) {
    return std::make_unique<statement_simple_statement_t>(
      std::move(simple_statement_0_)
    );
  }

};  // statement_simple_statement_t

}   // ast

}   // gliss
