#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "external-declaration.h"

/**
 * Patterns for translation_unit
 *
 * 1. external_declaration
 * 2. translation_unit external_declaration
 */

namespace gliss {

namespace ast {

class external_declaration_t;

class translation_unit_t: public ast_t {

public:

  static constexpr int rules = 2;

  static constexpr int id = 293;

  virtual ~translation_unit_t() = default;

};  // translation_unit_t

class translation_unit_external_declaration_t: public translation_unit_t {

public:

  std::shared_ptr<external_declaration_t> external_declaration_0;

  translation_unit_external_declaration_t(
    std::shared_ptr<external_declaration_t> external_declaration_0_
  ): external_declaration_0(external_declaration_0_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 293;
  }

  static std::shared_ptr<translation_unit_external_declaration_t> make(
    std::shared_ptr<external_declaration_t> external_declaration_0_
  ) {
    return std::make_shared<translation_unit_external_declaration_t>(
      external_declaration_0_
    );
  }

};  // translation_unit_external_declaration_t

class translation_unit_translation_unit_external_declaration_t: public translation_unit_t {

public:

  std::shared_ptr<translation_unit_t> translation_unit_0;

  std::shared_ptr<external_declaration_t> external_declaration_1;

  translation_unit_translation_unit_external_declaration_t(
    std::shared_ptr<translation_unit_t> translation_unit_0_,
    std::shared_ptr<external_declaration_t> external_declaration_1_
  ): translation_unit_0(translation_unit_0_),
     external_declaration_1(external_declaration_1_) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  virtual int get_id() const override {
    return 293;
  }

  static std::shared_ptr<translation_unit_translation_unit_external_declaration_t> make(
    std::shared_ptr<translation_unit_t> translation_unit_0_,
    std::shared_ptr<external_declaration_t> external_declaration_1_
  ) {
    return std::make_shared<translation_unit_translation_unit_external_declaration_t>(
      translation_unit_0_,
      external_declaration_1_
    );
  }

};  // translation_unit_translation_unit_external_declaration_t

}   // ast

}   // gliss
