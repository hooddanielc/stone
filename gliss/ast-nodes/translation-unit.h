#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "external-declaration.h"

namespace gliss {

namespace ast {

class external_declaration_t;

class translation_unit_t: public ast_t {

public:

  static constexpr int num_types = 2;

  template <int n, typename = void>
  struct pattern;

  template<int n>
  struct pattern<n, typename std::enable_if<n == 0>::type> {
    using type = translation_unit_external_declaration_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  template<int n>
  struct pattern<n, typename std::enable_if<n == 1>::type> {
    using type = translation_unit_translation_unit_external_declaration_t;
    static std::vector<std::shared_ptr<any_pattern_item_t>> list;
  };

  virtual ~translation_unit_t() = default;

};  // translation_unit_t

class translation_unit_external_declaration_t: public translation_unit_t {

public:

  std::unique_ptr<external_declaration_t> external_declaration_0;

  translation_unit_external_declaration_t(
    std::unique_ptr<external_declaration_t> &&external_declaration_0_
  ): external_declaration_0(std::move(external_declaration_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // translation_unit_external_declaration_t

class translation_unit_translation_unit_external_declaration_t: public translation_unit_t {

public:

  std::unique_ptr<translation_unit_t> translation_unit_0;

  std::unique_ptr<external_declaration_t> external_declaration_1;

  translation_unit_translation_unit_external_declaration_t(
    std::unique_ptr<translation_unit_t> &&translation_unit_0_,
    std::unique_ptr<external_declaration_t> &&external_declaration_1_
  ): translation_unit_0(std::move(translation_unit_0_)),
     external_declaration_1(std::move(external_declaration_1_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // translation_unit_translation_unit_external_declaration_t

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> translation_unit_t::pattern<0>::list = {
  pattern_item_t<external_declaration_t>::get()
};

template <>
std::vector<std::shared_ptr<any_pattern_item_t>> translation_unit_t::pattern<1>::list = {
  pattern_item_t<translation_unit_t>::get(),
  pattern_item_t<external_declaration_t>::get()
};

}   // ast

}   // gliss
