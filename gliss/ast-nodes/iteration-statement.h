#pragma once


/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */
  

#include <vector>
#include "../ast.h"
#include "iteration-statement-while-header.h"
#include "condition.h"
#include "statement-no-new-scope.h"
#include "statement.h"
#include "expression.h"
#include "iteration-statement-for-header.h"
#include "for-init-statement.h"
#include "for-rest-statement.h"

namespace gliss {

namespace ast {

class iteration_statement_t: public ast_t {

public:

  static const std::vector<std::vector<any_pattern_item_t>> patterns;

  iteration_statement_t(
    const iteration_statement_while_header_t &,
    const condition_t &,
    const token_t &,
    const statement_no_new_scope_t &
  );

  iteration_statement_t(
    const token_t &,
    const statement_t &,
    const token_t &,
    const token_t &,
    const expression_t &,
    const token_t &,
    const token_t &
  );

  iteration_statement_t(
    const iteration_statement_for_header_t &,
    const for_init_statement_t &,
    const for_rest_statement_t &,
    const token_t &,
    const statement_no_new_scope_t &
  );

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

};  // iteration_statement_t

const std::vector<std::vector<any_pattern_item_t>> iteration_statement_t::patterns = {
  {
    pattern_item_t<iteration_statement_while_header_t>::get(),
    pattern_item_t<condition_t>::get(),
    pattern_item_t<token_t>::get(token_t::uppercase_to_kind("RIGHT_PAREN")),
    pattern_item_t<statement_no_new_scope_t>::get()
  }, {
    pattern_item_t<token_t>::get(token_t::uppercase_to_kind("DO")),
    pattern_item_t<statement_t>::get(),
    pattern_item_t<token_t>::get(token_t::uppercase_to_kind("WHILE")),
    pattern_item_t<token_t>::get(token_t::uppercase_to_kind("LEFT_PAREN")),
    pattern_item_t<expression_t>::get(),
    pattern_item_t<token_t>::get(token_t::uppercase_to_kind("RIGHT_PAREN")),
    pattern_item_t<token_t>::get(token_t::uppercase_to_kind("SEMICOLON"))
  }, {
    pattern_item_t<iteration_statement_for_header_t>::get(),
    pattern_item_t<for_init_statement_t>::get(),
    pattern_item_t<for_rest_statement_t>::get(),
    pattern_item_t<token_t>::get(token_t::uppercase_to_kind("RIGHT_PAREN")),
    pattern_item_t<statement_no_new_scope_t>::get()
  }
};

}   // ast

}   // gliss
