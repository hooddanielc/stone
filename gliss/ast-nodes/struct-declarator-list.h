#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"
#include "struct-declarator.h"

/**
 * Patterns for struct_declarator_list
 *
 * 1. struct_declarator
 * 2. struct_declarator_list COMMA struct_declarator
 */

namespace gliss {

namespace ast {

class struct_declarator_t;

class struct_declarator_list_t: public ast_t {

public:

  static constexpr int num_types = 2;

  virtual ~struct_declarator_list_t() = default;

};  // struct_declarator_list_t

class struct_declarator_list_struct_declarator_t: public struct_declarator_list_t {

public:

  std::unique_ptr<struct_declarator_t> struct_declarator_0;

  struct_declarator_list_struct_declarator_t(
    std::unique_ptr<struct_declarator_t> &&struct_declarator_0_
  ): struct_declarator_0(std::move(struct_declarator_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<struct_declarator_list_struct_declarator_t> make(
    std::unique_ptr<struct_declarator_t> &&struct_declarator_0_
  ) {
    return std::make_unique<struct_declarator_list_struct_declarator_t>(
      std::move(struct_declarator_0_)
    );
  }

};  // struct_declarator_list_struct_declarator_t

class struct_declarator_list_struct_declarator_list_comma_struct_declarator_t: public struct_declarator_list_t {

public:

  std::unique_ptr<struct_declarator_list_t> struct_declarator_list_0;

  std::unique_ptr<token_t> comma_1;

  std::unique_ptr<struct_declarator_t> struct_declarator_2;

  struct_declarator_list_struct_declarator_list_comma_struct_declarator_t(
    std::unique_ptr<struct_declarator_list_t> &&struct_declarator_list_0_,
    std::unique_ptr<token_t> &&comma_1_,
    std::unique_ptr<struct_declarator_t> &&struct_declarator_2_
  ): struct_declarator_list_0(std::move(struct_declarator_list_0_)),
     comma_1(std::move(comma_1_)),
     struct_declarator_2(std::move(struct_declarator_2_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<struct_declarator_list_struct_declarator_list_comma_struct_declarator_t> make(
    std::unique_ptr<struct_declarator_list_t> &&struct_declarator_list_0_,
    const token_t *COMMA_1_,
    std::unique_ptr<struct_declarator_t> &&struct_declarator_2_
  ) {
    return std::make_unique<struct_declarator_list_struct_declarator_list_comma_struct_declarator_t>(
      std::move(struct_declarator_list_0_),
      std::make_unique<token_t>(*COMMA_1_),
      std::move(struct_declarator_2_)
    );
  }

};  // struct_declarator_list_struct_declarator_list_comma_struct_declarator_t

}   // ast

}   // gliss
