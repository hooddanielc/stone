#pragma once

/**
 * DO NOT MODIFY - AUTO GENERATED BY "../scripts/gen_cpp_node_constants.js"
 */

#include <vector>
#include "../ast.h"

/**
 * Patterns for interpolation_qualifier
 *
 * 1. SMOOTH
 * 2. FLAT
 * 3. NOPERSPECTIVE
 */

namespace gliss {

namespace ast {

class interpolation_qualifier_t: public ast_t {

public:

  static constexpr int rules = 3;

  static constexpr int id = 253;

  virtual ~interpolation_qualifier_t() = default;

};  // interpolation_qualifier_t

class interpolation_qualifier_smooth_t: public interpolation_qualifier_t {

public:

  std::unique_ptr<token_t> smooth_0;

  interpolation_qualifier_smooth_t(
    std::unique_ptr<token_t> &&smooth_0_
  ): smooth_0(std::move(smooth_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<interpolation_qualifier_smooth_t> make(
    const token_t *SMOOTH_0_
  ) {
    return std::make_unique<interpolation_qualifier_smooth_t>(
      std::make_unique<token_t>(*SMOOTH_0_)
    );
  }

};  // interpolation_qualifier_smooth_t

class interpolation_qualifier_flat_t: public interpolation_qualifier_t {

public:

  std::unique_ptr<token_t> flat_0;

  interpolation_qualifier_flat_t(
    std::unique_ptr<token_t> &&flat_0_
  ): flat_0(std::move(flat_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<interpolation_qualifier_flat_t> make(
    const token_t *FLAT_0_
  ) {
    return std::make_unique<interpolation_qualifier_flat_t>(
      std::make_unique<token_t>(*FLAT_0_)
    );
  }

};  // interpolation_qualifier_flat_t

class interpolation_qualifier_noperspective_t: public interpolation_qualifier_t {

public:

  std::unique_ptr<token_t> noperspective_0;

  interpolation_qualifier_noperspective_t(
    std::unique_ptr<token_t> &&noperspective_0_
  ): noperspective_0(std::move(noperspective_0_)) {}

  virtual void accept(const visitor_t &visitor) const override {
    visitor(this);
  }

  static std::unique_ptr<interpolation_qualifier_noperspective_t> make(
    const token_t *NOPERSPECTIVE_0_
  ) {
    return std::make_unique<interpolation_qualifier_noperspective_t>(
      std::make_unique<token_t>(*NOPERSPECTIVE_0_)
    );
  }

};  // interpolation_qualifier_noperspective_t

}   // ast

}   // gliss
